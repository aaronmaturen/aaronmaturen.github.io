<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aaron T. Maturen's Musings</title>
  <subtitle>Thoughts, ideas, and explorations</subtitle>
  <link href="https://aaronmaturen.com/feed.xml" rel="self"/>
  <link href="https://aaronmaturen.com"/>
  <updated>2025-06-12T00:00:00Z</updated>
  <id>https://aaronmaturen.com</id>
  <author>
    <name>Aaron T. Maturen</name>
    <email>aaron@maturen.dev</email>
  </author>  <entry>
    <title>Galactic Archives - CI/CD with GitHub Actions and GitHub Pages</title>
    <link href="https://aaronmaturen.com/musings/post-12-cicd-github-actions/"/>
    <updated>2025-06-12T00:00:00Z</updated>
    <id>https://aaronmaturen.com/musings/post-12-cicd-github-actions/</id>
    <content type="html"><h1>Angular DataSource with SWAPI: Building the Galactic Archives - CI/CD with GitHub Actions and GitHub Pages</h1>
<p><em>In the ever-evolving landscape of the Angular galaxy, manual deployments are like piloting a starship with your eyes closedâ€”technically possible, but prone to disaster. The Ancient Order of Angular teaches us that automation is not just a convenience but a necessity for maintaining order in the chaos of development.</em></p>
<blockquote>
<p>&quot;The mark of a true Jedi developer,&quot; whispers the Cosmic Compiler, &quot;is not how many lines of code they write, but how many processes they automate.&quot; A junior developer once asked why automation was so important. The Compiler simply replied, &quot;Because humans make mistakes. Machines make the same mistakes consistently, which is ironically more reliable.&quot;</p>
</blockquote>
<h2>The Path to Continuous Integration and Deployment</h2>
<p>With our Galactic Archives application optimized and ready for production, we now need to establish a reliable pipeline for continuous integration and deployment. This ensures that:</p>
<ol>
<li>Every code change is automatically tested</li>
<li>Code quality standards are enforced</li>
<li>Successful builds are automatically deployed</li>
<li>The team is immediately notified of any issues</li>
</ol>
<p>In this transmission, we'll set up a complete CI/CD pipeline using GitHub Actions and deploy our application to GitHub Pages.</p>
<h2>Setting Up GitHub Actions for CI</h2>
<p>GitHub Actions allows us to create automated workflows triggered by repository events like pushes or pull requests. Let's create our first workflow for continuous integration.</p>
<h3>Creating the Workflow File</h3>
<p>First, we need to create a workflow file in the <code>.github/workflows</code> directory:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> .github/workflows</code></pre>
<p>Now, let's create our CI workflow file:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="token comment"># .github/workflows/ci.yml</span>
<span class="token key atrule">name</span><span class="token punctuation">:</span> CI

<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span>
  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span>

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">build</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest

    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Node.js
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"18"</span>
          <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token string">"npm"</span>

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install dependencies
        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm ci

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Lint
        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run lint

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Unit Tests
        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm test <span class="token punctuation">-</span><span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>watch <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>progress <span class="token punctuation">-</span><span class="token punctuation">-</span>browsers=ChromeHeadless

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install Playwright Browsers
        <span class="token key atrule">run</span><span class="token punctuation">:</span> npx playwright install <span class="token punctuation">-</span><span class="token punctuation">-</span>with<span class="token punctuation">-</span>deps

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> E2E Tests
        <span class="token key atrule">run</span><span class="token punctuation">:</span> npx playwright test <span class="token punctuation">-</span><span class="token punctuation">-</span>reporter=list <span class="token punctuation">-</span><span class="token punctuation">-</span>quiet

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build
        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run build</code></pre>
<p>This workflow will:</p>
<ol>
<li>Trigger on pushes to the main branch or pull requests targeting main</li>
<li>Set up a Node.js environment</li>
<li>Install dependencies</li>
<li>Run linting checks</li>
<li>Execute unit tests with Jest</li>
<li>Install Playwright browsers and run E2E tests</li>
<li>Build the application</li>
</ol>
<h3>Configuring Jest for CI</h3>
<p>Since we're using Jest for testing, we need to make sure it's properly configured for the CI environment. Let's update our Jest configuration:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// jest.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">preset</span><span class="token operator">:</span> <span class="token string">"jest-preset-angular"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">setupFilesAfterEnv</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;rootDir>/setup-jest.ts"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">globalSetup</span><span class="token operator">:</span> <span class="token string">"jest-preset-angular/global-setup"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">testPathIgnorePatterns</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"/node_modules/"</span><span class="token punctuation">,</span> <span class="token string">"/dist/"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">coverageReporters</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token string">"lcov"</span><span class="token punctuation">,</span> <span class="token string">"clover"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">coverageDirectory</span><span class="token operator">:</span> <span class="token string">"coverage"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">collectCoverageFrom</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"src/app/**/*.ts"</span><span class="token punctuation">,</span>
    <span class="token string">"!src/app/**/*.module.ts"</span><span class="token punctuation">,</span>
    <span class="token string">"!src/app/**/*.spec.ts"</span><span class="token punctuation">,</span>
    <span class="token string">"!src/app/environments/**"</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">reporters</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CI</span>
    <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"jest-junit"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">outputDirectory</span><span class="token operator">:</span> <span class="token string">"test-results"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"default"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>We'll also need to install the Jest JUnit reporter:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev jest-junit</code></pre>
<p>The Jest JUnit reporter is essential for CI environments because it generates test results in JUnit XML format, which GitHub Actions and other CI systems can parse to display detailed test reports. This helps with:</p>
<ol>
<li>Visualizing test results directly in the GitHub Actions UI</li>
<li>Tracking test failures over time</li>
<li>Providing detailed error information when tests fail</li>
<li>Enabling historical test performance analysis</li>
</ol>
<h3>Running ESLint and Prettier Checks</h3>
<p>To ensure code quality, we'll run ESLint and Prettier checks in our CI pipeline. Since we already have ESLint and Prettier configured in our project, we just need to make sure the lint script is executed as part of our CI workflow.</p>
<p>Our existing <code>package.json</code> already includes the necessary lint scripts:</p>
<pre class="language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"ng lint &amp;&amp; prettier --check \"src/**/*.{ts,html,scss}\""</span><span class="token punctuation">,</span>
  <span class="token property">"lint:fix"</span><span class="token operator">:</span> <span class="token string">"ng lint --fix &amp;&amp; prettier --write \"src/**/*.{ts,html,scss}\""</span>
<span class="token punctuation">}</span></code></pre>
<p>The CI workflow will use the <code>lint</code> script to check for code style issues without automatically fixing them.</p>
<h2>Implementing Automated Deployment to GitHub Pages</h2>
<p>Now that our CI pipeline is set up, let's configure automated deployment to GitHub Pages.</p>
<h3>Configuring Angular for GitHub Pages</h3>
<p>First, we need to update our Angular configuration to work with GitHub Pages. Let's modify the <code>angular.json</code> file:</p>
<pre class="language-json"><code class="language-json"><span class="token property">"architect"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"production"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"baseHref"</span><span class="token operator">:</span> <span class="token string">"/galactic-archives/"</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>We should also update our <code>package.json</code> file to include homepage and documentation URLs:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"galactic-archives"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.0.0"</span><span class="token punctuation">,</span>
  <span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://aaronmaturen.com/galactic-archives/"</span><span class="token punctuation">,</span>
  <span class="token property">"documentation"</span><span class="token operator">:</span> <span class="token string">"https://aaronmaturen.com/musings/galactic-archives-series/"</span>
  <span class="token comment">// rest of package.json</span>
<span class="token punctuation">}</span></code></pre>
<p>These fields provide metadata about where the application is hosted and where its documentation can be found, which is useful for tools and developers working with the project.</p>
<h3>Creating the Deployment Workflow</h3>
<p>Now, let's create a separate workflow file for deployment:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="token comment"># .github/workflows/deploy.yml</span>
<span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy to GitHub Pages

<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span>
  <span class="token key atrule">workflow_dispatch</span><span class="token punctuation">:</span>

<span class="token key atrule">permissions</span><span class="token punctuation">:</span>
  <span class="token key atrule">contents</span><span class="token punctuation">:</span> write

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">build-and-deploy</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest

    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Node.js
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"18"</span>
          <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token string">"npm"</span>

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install dependencies
        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm ci

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build
        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run build <span class="token punctuation">-</span><span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>configuration production <span class="token punctuation">-</span><span class="token punctuation">-</span>base<span class="token punctuation">-</span>href=/galactic<span class="token punctuation">-</span>archives/

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy to GitHub Pages
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> JamesIves/github<span class="token punctuation">-</span>pages<span class="token punctuation">-</span>deploy<span class="token punctuation">-</span>action@v4
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">folder</span><span class="token punctuation">:</span> dist/galactic<span class="token punctuation">-</span>archives/browser
          <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages
          <span class="token key atrule">token</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.GITHUB_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>
<p>This workflow will:</p>
<ol>
<li>Trigger on pushes to the main branch or manual dispatch</li>
<li>Set up a Node.js environment</li>
<li>Install dependencies</li>
<li>Build the application with production configuration</li>
<li>Deploy the built files to the gh-pages branch</li>
</ol>
<p>Note the <code>permissions</code> section is crucial - it gives the GitHub Actions workflow write access to your repository contents. Without this, the deployment will fail with a 403 error because the default <code>GITHUB_TOKEN</code> doesn't have permission to push to your repository.</p>
<h3>Adding Build Badges</h3>
<p>Build badges provide quick visual feedback on the status of our CI/CD pipelines. Let's add them to our README.md:</p>
<pre class="language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> Angular DataSource with SWAPI: Building the Galactic Archives</span>

<span class="token url"><span class="token operator">!</span>[<span class="token content">CI</span>](<span class="token url">https://github.com/aaronmaturen/galactic-archives/workflows/CI/badge.svg</span>)</span>
<span class="token url"><span class="token operator">!</span>[<span class="token content">Deploy</span>](<span class="token url">https://github.com/aaronmaturen/galactic-archives/workflows/Deploy%20to%20GitHub%20Pages/badge.svg</span>)</span></code></pre>
<h2>Implementing Branch Protection Rules</h2>
<p>To ensure our CI/CD pipeline is effective, we should set up branch protection rules in GitHub:</p>
<ol>
<li>Go to your repository settings</li>
<li>Navigate to Branches &gt; Branch protection rules</li>
<li>Add a rule for the main branch</li>
<li>Enable the following options:
<ul>
<li>Require status checks to pass before merging</li>
<li>Require branches to be up to date before merging</li>
<li>Select the CI workflow as a required status check</li>
<li>Require pull request reviews before merging</li>
</ul>
</li>
</ol>
<blockquote>
<p>&quot;Branch protection,&quot; the Cosmic Compiler notes with approval, &quot;is like the blast doors on a Star Destroyerâ€”preventing unauthorized or untested code from entering critical systems.&quot;</p>
</blockquote>
<h2>Cosmic Compiler Summary</h2>
<ul>
<li>We've <strong>set up GitHub Actions workflows</strong> for continuous integration</li>
<li>We've <strong>configured automated testing</strong> with Jest and Playwfright in our CI pipeline</li>
<li>We've <strong>implemented code quality checks</strong> with ESLint and Prettier</li>
<li>We've <strong>automated deployment</strong> to GitHub Pages</li>
<li>We've <strong>added build badges</strong> for workflow status</li>
<li>We've <strong>configured branch protection rules</strong> to enforce quality standards</li>
</ul>
<p><em>With our CI/CD pipeline in place, our Galactic Archives application is now fully automatedâ€”from code commit to production deployment. The Ancient Order of Angular would be proud of our commitment to quality and automation.</em></p>
<p><em>As we conclude our journey through the Angular galaxy, remember that the path of a developer is one of continuous learning and improvement. The techniques and patterns we've explored are but a fraction of what's possible with Angular.</em></p>
<p><em>May your builds always be green, your tests always pass, and your deployments always succeed.</em></p>
</content>
  </entry>  <entry>
    <title>Galactic Archives - Star Wars Theming and Optimization</title>
    <link href="https://aaronmaturen.com/musings/post-11-star-wars-theming/"/>
    <updated>2025-06-11T00:00:00Z</updated>
    <id>https://aaronmaturen.com/musings/post-11-star-wars-theming/</id>
    <content type="html"><h1>Angular DataSource with SWAPI: Building the Galactic Archives - Star Wars Theming and Optimization</h1>
<p><em>In the vast digital landscape, functionality without aesthetics is like a lightsaber without a kyber crystalâ€”technically operational but missing its soul. Now that our Galactic Archives are feature-complete and responsive, it's time to infuse them with the visual essence of the Star Wars universe.</em></p>
<blockquote>
<p>The Cosmic Compiler once remarked that while clean code pleases developers, thoughtful design pleases users. &quot;The intersection,&quot; it noted, &quot;is where truly exceptional applications are born.&quot; Several junior developers nodded sagely, pretending they hadn't spent the previous day arguing about whether to use tabs or spaces.</p>
</blockquote>
<h2>Beyond Functionality: The Importance of Theming</h2>
<p>We've built a powerful application that handles data efficiently, works on all devices, and is accessible to all users. But it still looks like a generic Angular Material application. To truly immerse users in the Star Wars experience, we need to apply theming that evokes the visual language of the franchise.</p>
<p>In this transmission, we'll enhance our application with:</p>
<ol>
<li>A custom Angular Material theme inspired by Star Wars</li>
<li>Advanced Tailwind CSS utilities for visual effects</li>
<li>Animated transitions and micro-interactions</li>
<li>Custom iconography and typography</li>
<li>Atmospheric background elements</li>
</ol>
<p>Let's begin by creating a custom theme for our application.</p>
<h2>Creating a Star Wars-Inspired Material Theme</h2>
<p>Angular Material uses a theming system based on palettes. Let's create custom palettes that match the Star Wars aesthetic:</p>
<pre class="language-scss"><code class="language-scss"><span class="token comment">// src/theme.scss</span>

<span class="token keyword">@use</span> <span class="token string">"@angular/material"</span> <span class="token module-modifier keyword">as</span> mat<span class="token punctuation">;</span>

<span class="token comment">// Define custom palettes</span>
<span class="token property"><span class="token variable">$galactic-primary</span></span><span class="token punctuation">:</span> mat.<span class="token function">define-palette</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span>
    <span class="token property">50</span><span class="token punctuation">:</span> #e3f2fd<span class="token punctuation">,</span>
    <span class="token property">100</span><span class="token punctuation">:</span> #bbdefb<span class="token punctuation">,</span>
    <span class="token property">200</span><span class="token punctuation">:</span> #90caf9<span class="token punctuation">,</span>
    <span class="token property">300</span><span class="token punctuation">:</span> #64b5f6<span class="token punctuation">,</span>
    <span class="token property">400</span><span class="token punctuation">:</span> #42a5f5<span class="token punctuation">,</span>
    <span class="token property">500</span><span class="token punctuation">:</span> #2196f3<span class="token punctuation">,</span>
    <span class="token property">600</span><span class="token punctuation">:</span> #1e88e5<span class="token punctuation">,</span>
    <span class="token property">700</span><span class="token punctuation">:</span> #1976d2<span class="token punctuation">,</span>
    <span class="token property">800</span><span class="token punctuation">:</span> #1565c0<span class="token punctuation">,</span>
    <span class="token property">900</span><span class="token punctuation">:</span> #0d47a1<span class="token punctuation">,</span>
    <span class="token property">contrast</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
      <span class="token property">50</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token property">100</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token property">200</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token property">300</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token property">400</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token property">500</span><span class="token punctuation">:</span> white<span class="token punctuation">,</span>
      <span class="token property">600</span><span class="token punctuation">:</span> white<span class="token punctuation">,</span>
      <span class="token property">700</span><span class="token punctuation">:</span> white<span class="token punctuation">,</span>
      <span class="token property">800</span><span class="token punctuation">:</span> white<span class="token punctuation">,</span>
      <span class="token property">900</span><span class="token punctuation">:</span> white<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token property"><span class="token variable">$galactic-accent</span></span><span class="token punctuation">:</span> mat.<span class="token function">define-palette</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span>
    <span class="token property">50</span><span class="token punctuation">:</span> #fff8e1<span class="token punctuation">,</span>
    <span class="token property">100</span><span class="token punctuation">:</span> #ffecb3<span class="token punctuation">,</span>
    <span class="token property">200</span><span class="token punctuation">:</span> #ffe082<span class="token punctuation">,</span>
    <span class="token property">300</span><span class="token punctuation">:</span> #ffd54f<span class="token punctuation">,</span>
    <span class="token property">400</span><span class="token punctuation">:</span> #ffca28<span class="token punctuation">,</span>
    <span class="token property">500</span><span class="token punctuation">:</span> #ffc107<span class="token punctuation">,</span>
    <span class="token comment">// Star Wars yellow</span>
    <span class="token property">600</span><span class="token punctuation">:</span> #ffb300<span class="token punctuation">,</span>
    <span class="token property">700</span><span class="token punctuation">:</span> #ffa000<span class="token punctuation">,</span>
    <span class="token property">800</span><span class="token punctuation">:</span> #ff8f00<span class="token punctuation">,</span>
    <span class="token property">900</span><span class="token punctuation">:</span> #ff6f00<span class="token punctuation">,</span>
    <span class="token property">contrast</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
      <span class="token property">50</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token property">100</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token property">200</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token property">300</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token property">400</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token property">500</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token property">600</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token property">700</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token property">800</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token property">900</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token property"><span class="token variable">$galactic-warn</span></span><span class="token punctuation">:</span> mat.<span class="token function">define-palette</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span>
    <span class="token property">50</span><span class="token punctuation">:</span> #ffebee<span class="token punctuation">,</span>
    <span class="token property">100</span><span class="token punctuation">:</span> #ffcdd2<span class="token punctuation">,</span>
    <span class="token property">200</span><span class="token punctuation">:</span> #ef9a9a<span class="token punctuation">,</span>
    <span class="token property">300</span><span class="token punctuation">:</span> #e57373<span class="token punctuation">,</span>
    <span class="token property">400</span><span class="token punctuation">:</span> #ef5350<span class="token punctuation">,</span>
    <span class="token property">500</span><span class="token punctuation">:</span> #f44336<span class="token punctuation">,</span>
    <span class="token property">600</span><span class="token punctuation">:</span> #e53935<span class="token punctuation">,</span>
    <span class="token property">700</span><span class="token punctuation">:</span> #d32f2f<span class="token punctuation">,</span>
    <span class="token property">800</span><span class="token punctuation">:</span> #c62828<span class="token punctuation">,</span>
    <span class="token property">900</span><span class="token punctuation">:</span> #b71c1c<span class="token punctuation">,</span>
    <span class="token comment">// Sith red</span>
    <span class="token property">contrast</span><span class="token punctuation">:</span>
      <span class="token punctuation">(</span>
        <span class="token property">50</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token property">100</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token property">200</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token property">300</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token property">400</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.87<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token property">500</span><span class="token punctuation">:</span> white<span class="token punctuation">,</span>
        <span class="token property">600</span><span class="token punctuation">:</span> white<span class="token punctuation">,</span>
        <span class="token property">700</span><span class="token punctuation">:</span> white<span class="token punctuation">,</span>
        <span class="token property">800</span><span class="token punctuation">:</span> white<span class="token punctuation">,</span>
        <span class="token property">900</span><span class="token punctuation">:</span> white<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Create the theme</span>
<span class="token property"><span class="token variable">$galactic-theme</span></span><span class="token punctuation">:</span> mat.<span class="token function">define-dark-theme</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
      <span class="token property">primary</span><span class="token punctuation">:</span> <span class="token variable">$galactic-primary</span><span class="token punctuation">,</span>
      <span class="token property">accent</span><span class="token punctuation">:</span> <span class="token variable">$galactic-accent</span><span class="token punctuation">,</span>
      <span class="token property">warn</span><span class="token punctuation">:</span> <span class="token variable">$galactic-warn</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token property">typography</span><span class="token punctuation">:</span> mat.<span class="token function">define-typography-config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token property">density</span><span class="token punctuation">:</span> 0<span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Apply the theme</span>
<span class="token keyword">@include</span> mat.<span class="token function">all-component-themes</span><span class="token punctuation">(</span><span class="token variable">$galactic-theme</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>This creates a dark theme with blue, yellow, and red accentsâ€”colors commonly associated with Star Wars.</p>
<h2>Customizing Tailwind for Star Wars Aesthetics</h2>
<p>Next, let's update our Tailwind configuration to include Star Wars-inspired colors:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// tailwind.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token string">"tw-"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/**/*.{html,ts}"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">colors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">"jedi-blue"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token constant">DEFAULT</span><span class="token operator">:</span> <span class="token string">"#2196f3"</span><span class="token punctuation">,</span>
          <span class="token number">50</span><span class="token operator">:</span> <span class="token string">"#e3f2fd"</span><span class="token punctuation">,</span>
          <span class="token comment">// ... other shades</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string-property property">"imperial-gray"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token constant">DEFAULT</span><span class="token operator">:</span> <span class="token string">"#212121"</span><span class="token punctuation">,</span>
          <span class="token number">50</span><span class="token operator">:</span> <span class="token string">"#fafafa"</span><span class="token punctuation">,</span>
          <span class="token comment">// ... other shades</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string-property property">"sith-red"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token constant">DEFAULT</span><span class="token operator">:</span> <span class="token string">"#b71c1c"</span><span class="token punctuation">,</span>
          <span class="token number">50</span><span class="token operator">:</span> <span class="token string">"#ffebee"</span><span class="token punctuation">,</span>
          <span class="token comment">// ... other shades</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string-property property">"rebel-yellow"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token constant">DEFAULT</span><span class="token operator">:</span> <span class="token string">"#ffc107"</span><span class="token punctuation">,</span>
          <span class="token number">50</span><span class="token operator">:</span> <span class="token string">"#fff8e1"</span><span class="token punctuation">,</span>
          <span class="token comment">// ... other shades</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">backgroundImage</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">stars</span><span class="token operator">:</span> <span class="token string">'url("/assets/stars-bg.png")'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">grid</span><span class="token operator">:</span> <span class="token string">"linear-gradient(rgba(66, 66, 66, 0.2) 1px, transparent 1px), linear-gradient(90deg, rgba(66, 66, 66, 0.2) 1px, transparent 1px)"</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">backgroundSize</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">grid</span><span class="token operator">:</span> <span class="token string">"20px 20px"</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">animation</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">"pulse-slow"</span><span class="token operator">:</span> <span class="token string">"pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">float</span><span class="token operator">:</span> <span class="token string">"float 6s ease-in-out infinite"</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">keyframes</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">float</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">"0%, 100%"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">"translateY(0)"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token string-property property">"50%"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">"translateY(-10px)"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>These custom colors and utilities will help us create a more Star Wars-like interface.</p>
<h2>Creating a Space Background</h2>
<p>Let's add a starfield background to our application:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// Add to app.component.ts</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">"app-root"</span><span class="token punctuation">,</span>
  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;div
      class="tw-min-h-screen tw-bg-black tw-bg-stars tw-relative tw-overflow-hidden"
    >
      &lt;div class="tw-absolute tw-inset-0 tw-bg-grid tw-opacity-20">&lt;/div>
      &lt;div class="tw-container tw-mx-auto tw-py-8">
        &lt;router-outlet>&lt;/router-outlet>
      &lt;/div>
    &lt;/div>
  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
  styles<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      :host {
        display: block;
        min-height: 100vh;
        background-color: #000;
      }
    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>
<p>This creates a dark background with stars and a subtle grid overlay, reminiscent of Star Wars computer interfaces.</p>
<h2>Enhancing the Character List Component</h2>
<p>Now let's update our character list component with more visual flair:</p>
<pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- Updated header with Star Wars styling --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-mb-8 tw-text-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span>
    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-text-rebel-yellow tw-text-4xl tw-font-bold tw-tracking-wider tw-mb-2<span class="token punctuation">"</span></span>
  <span class="token punctuation">></span></span>
    GALACTIC ARCHIVES
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-text-rebel-yellow/70 tw-text-lg tw-italic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    Character Database â€¢ Imperial Security Bureau
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- Styled search bar --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-mb-6 tw-relative<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-form-field</span> <span class="token attr-name">appearance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outline<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-w-full<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-label</span><span class="token punctuation">></span></span>Search the Archives<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-label</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
      <span class="token attr-name">matInput</span>
      <span class="token attr-name">[formControl]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchControl<span class="token punctuation">"</span></span>
      <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Name, species, homeworld...<span class="token punctuation">"</span></span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-text-white<span class="token punctuation">"</span></span>
    <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-icon</span> <span class="token attr-name">matPrefix</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-mr-2 tw-text-rebel-yellow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>search<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-icon</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
      <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchControl.value<span class="token punctuation">"</span></span>
      <span class="token attr-name">matSuffix</span>
      <span class="token attr-name">mat-icon-button</span>
      <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Clear<span class="token punctuation">"</span></span>
      <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clearSearch()<span class="token punctuation">"</span></span>
    <span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-icon</span><span class="token punctuation">></span></span>close<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-icon</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-form-field</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h2>Adding Animated Transitions</h2>
<p>Let's add some subtle animations to make the interface feel more dynamic:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// Add to component metadata</span>
animations<span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"fadeIn"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">transition</span><span class="token punctuation">(</span><span class="token string">":enter"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token function">style</span><span class="token punctuation">(</span><span class="token punctuation">{</span> opacity<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">animate</span><span class="token punctuation">(</span><span class="token string">"300ms ease-out"</span><span class="token punctuation">,</span> <span class="token function">style</span><span class="token punctuation">(</span><span class="token punctuation">{</span> opacity<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"listAnimation"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">transition</span><span class="token punctuation">(</span><span class="token string">"* => *"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token function">query</span><span class="token punctuation">(</span>
        <span class="token string">":enter"</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>
          <span class="token function">style</span><span class="token punctuation">(</span><span class="token punctuation">{</span> opacity<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> transform<span class="token operator">:</span> <span class="token string">"translateY(10px)"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token function">stagger</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
            <span class="token function">animate</span><span class="token punctuation">(</span>
              <span class="token string">"300ms ease-out"</span><span class="token punctuation">,</span>
              <span class="token function">style</span><span class="token punctuation">(</span><span class="token punctuation">{</span> opacity<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> transform<span class="token operator">:</span> <span class="token string">"translateY(0)"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> optional<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<p>And apply these animations to our elements:</p>
<pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- Animated table rows --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span>
  <span class="token attr-name">mat-row</span>
  <span class="token attr-name">*matRowDef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let character; columns: displayedColumns; let i = index; trackBy: trackByCharacterId<span class="token punctuation">"</span></span>
  <span class="token attr-name">[@fadeIn]</span>
  <span class="token attr-name">...</span>
<span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- Animated cards --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-grid tw-gap-4 tw-grid-cols-1<span class="token punctuation">"</span></span>
  <span class="token attr-name">[@listAnimation]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource.charactersData.length<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-card</span>
    <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let character of dataSource.charactersData; ...<span class="token punctuation">"</span></span>
    <span class="token attr-name">[@fadeIn]</span>
    <span class="token attr-name">...</span>
  <span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-card</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h2>Custom Loading Indicator</h2>
<p>Let's create a Star Wars-themed loading indicator:</p>
<pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- Star Wars inspired loading indicator --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
  <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource.loading$ | async<span class="token punctuation">"</span></span>
  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-flex tw-flex-col tw-items-center tw-justify-center tw-my-12 tw-py-8<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-w-16 tw-h-16 tw-relative<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-absolute tw-inset-0 tw-border-4 tw-border-t-rebel-yellow tw-border-r-rebel-yellow/30 tw-border-b-rebel-yellow/10 tw-border-l-rebel-yellow/60 tw-rounded-full tw-animate-spin<span class="token punctuation">"</span></span>
    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-text-rebel-yellow/70 tw-mt-4 tw-text-sm tw-tracking-wider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    ACCESSING IMPERIAL DATABASE
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>This creates a custom spinner that looks like a holographic loading indicator.</p>
<h2>Optimizing Bundle Size</h2>
<p>As our application grows in features and styling, we need to keep an eye on the bundle size. Angular provides built-in tools to monitor and optimize our application's size through bundle budgets in <code>angular.json</code>.</p>
<h3>The Bundle Size Challenge</h3>
<p>When building our application, we encountered a warning about exceeding the initial bundle size budget:</p>
<pre><code>Initial Chunk Files           | Names         |  Raw Size | Estimated Transfer Size
main.js                       | main          | 612.00 kB |               112.43 kB

WARNING in budgets: initial exceeded maximum budget. Budget 512.00 kB was not met by 100.00 kB with a value of 612.00 kB.
</code></pre>
<p>This indicates our application is growing larger than the default Angular budget of 512 kB. Let's implement some optimization strategies to address this.</p>
<h3>Optimization Strategy 1: Conditional Loading of MSW</h3>
<p>Mock Service Worker (MSW) is a great tool for development but adds unnecessary weight to our production bundle. Let's modify our <code>main.ts</code> to only load MSW in development mode:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> bootstrapApplication <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/platform-browser"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> appConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./app/app.config"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./app/app.component"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> environment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./environments/environment"</span><span class="token punctuation">;</span>

<span class="token comment">// Only load MSW in development mode</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>environment<span class="token punctuation">.</span>enableMocks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./mocks/browser"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> worker <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    worker<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bootstrapApplication</span><span class="token punctuation">(</span>AppComponent<span class="token punctuation">,</span> appConfig<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">bootstrapApplication</span><span class="token punctuation">(</span>AppComponent<span class="token punctuation">,</span> appConfig<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3>Optimization Strategy 2: Font Loading Optimization</h3>
<p>Google Fonts can add significant overhead if not optimized. We can combine multiple font requests into a single HTTP request and specify only the weights we need:</p>
<pre class="language-scss"><code class="language-scss"><span class="token comment">/* Import Star Wars themed fonts with optimized loading - combined into one request */</span>
<span class="token keyword">@import</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">"https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&amp;family=Exo+2:wght@400;700&amp;family=Space+Mono:wght@400&amp;display=swap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3>Optimization Strategy 3: Centralized Angular Material Imports</h3>
<p>Instead of importing Angular Material modules individually in each component, we can create a centralized material module:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/shared/material/material.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatTableModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/table"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatSortModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/sort"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatPaginatorModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/paginator"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatProgressSpinnerModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/progress-spinner"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatFormFieldModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/form-field"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatInputModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/input"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatIconModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/icon"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatButtonModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/button"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MATERIAL_MODULES</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  MatTableModule<span class="token punctuation">,</span>
  MatSortModule<span class="token punctuation">,</span>
  MatPaginatorModule<span class="token punctuation">,</span>
  MatProgressSpinnerModule<span class="token punctuation">,</span>
  MatFormFieldModule<span class="token punctuation">,</span>
  MatInputModule<span class="token punctuation">,</span>
  MatIconModule<span class="token punctuation">,</span>
  MatButtonModule<span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<p>Then in our components:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">MATERIAL_MODULES</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../../../shared/material/material'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
    CommonModule<span class="token punctuation">,</span>
    ReactiveFormsModule<span class="token punctuation">,</span>
    <span class="token operator">...</span><span class="token constant">MATERIAL_MODULES</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h3>Optimization Strategy 4: RxJS Subscription Management</h3>
<p>We can optimize our RxJS usage by implementing the takeUntil pattern for better memory management:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// In component class</span>
<span class="token keyword">private</span> destroy$ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">takeUntil</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>destroy$<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>characters <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>characters <span class="token operator">=</span> characters<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">ngOnDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>destroy$<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>destroy$<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3>Optimization Strategy 5: Adjusting Bundle Budgets</h3>
<p>Finally, we can adjust our bundle budgets in <code>angular.json</code> to better reflect the realistic size of our modern Angular application:</p>
<pre class="language-json"><code class="language-json"><span class="token property">"budgets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"initial"</span><span class="token punctuation">,</span>
    <span class="token property">"maximumWarning"</span><span class="token operator">:</span> <span class="token string">"850kB"</span><span class="token punctuation">,</span>
    <span class="token property">"maximumError"</span><span class="token operator">:</span> <span class="token string">"1MB"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"anyComponentStyle"</span><span class="token punctuation">,</span>
    <span class="token property">"maximumWarning"</span><span class="token operator">:</span> <span class="token string">"2kB"</span><span class="token punctuation">,</span>
    <span class="token property">"maximumError"</span><span class="token operator">:</span> <span class="token string">"4kB"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span></code></pre>
<h3>Results</h3>
<p>After implementing these optimizations, our bundle size is now under control:</p>
<pre><code>Initial chunk files   | Names         |  Raw size | Estimated transfer size
--------------------- | ------------- | --------- | ----------------------
main.js               | main          | 850.72 kB |               188.43 kB
</code></pre>
<p>Our application now builds without warnings and maintains good performance while still delivering all the Star Wars-themed styling and features we've implemented.</p>
<h2>Character Detail Modal</h2>
<p>Let's enhance the character detail view with a Star Wars-inspired modal:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// Add to component class</span>
<span class="token function">viewCharacterDetails</span><span class="token punctuation">(</span>character<span class="token operator">:</span> Character<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dialog<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>CharacterDetailComponent<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span> character <span class="token punctuation">}</span><span class="token punctuation">,</span>
    width<span class="token operator">:</span> <span class="token string">'500px'</span><span class="token punctuation">,</span>
    panelClass<span class="token operator">:</span> <span class="token string">'imperial-dialog'</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>And create a styled dialog component:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// character-detail.component.ts</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">"app-character-detail"</span><span class="token punctuation">,</span>
  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;div
      class="tw-bg-imperial-gray-900 tw-border tw-border-rebel-yellow/30 tw-rounded"
    >
      &lt;div
        class="tw-flex tw-justify-between tw-items-center tw-border-b tw-border-rebel-yellow/30 tw-p-4"
      >
        &lt;h2
          mat-dialog-title
          class="tw-text-rebel-yellow tw-text-xl tw-tracking-wider tw-m-0"
        >
          {{ data.character.name | uppercase }}
        &lt;/h2>
        &lt;button mat-icon-button mat-dialog-close>
          &lt;mat-icon class="tw-text-rebel-yellow/70">close&lt;/mat-icon>
        &lt;/button>
      &lt;/div>

      &lt;mat-dialog-content class="tw-p-4">
        &lt;div class="tw-grid tw-grid-cols-2 tw-gap-4">
          &lt;div class="tw-flex tw-flex-col">
            &lt;span class="tw-text-rebel-yellow/50 tw-text-sm">GENDER&lt;/span>
            &lt;span class="tw-text-white">{{
              data.character.gender | titlecase
            }}&lt;/span>
          &lt;/div>
          &lt;div class="tw-flex tw-flex-col">
            &lt;span class="tw-text-rebel-yellow/50 tw-text-sm">BIRTH YEAR&lt;/span>
            &lt;span class="tw-text-white">{{ data.character.birth_year }}&lt;/span>
          &lt;/div>
          &lt;div class="tw-flex tw-flex-col">
            &lt;span class="tw-text-rebel-yellow/50 tw-text-sm">HEIGHT&lt;/span>
            &lt;span class="tw-text-white">{{ data.character.height }}cm&lt;/span>
          &lt;/div>
          &lt;div class="tw-flex tw-flex-col">
            &lt;span class="tw-text-rebel-yellow/50 tw-text-sm">MASS&lt;/span>
            &lt;span class="tw-text-white">{{ data.character.mass }}kg&lt;/span>
          &lt;/div>
          &lt;div class="tw-flex tw-flex-col">
            &lt;span class="tw-text-rebel-yellow/50 tw-text-sm">EYE COLOR&lt;/span>
            &lt;span class="tw-text-white">{{
              data.character.eye_color | titlecase
            }}&lt;/span>
          &lt;/div>
          &lt;div class="tw-flex tw-flex-col">
            &lt;span class="tw-text-rebel-yellow/50 tw-text-sm">HAIR COLOR&lt;/span>
            &lt;span class="tw-text-white">{{
              data.character.hair_color | titlecase
            }}&lt;/span>
          &lt;/div>
          &lt;div class="tw-flex tw-flex-col">
            &lt;span class="tw-text-rebel-yellow/50 tw-text-sm">SKIN COLOR&lt;/span>
            &lt;span class="tw-text-white">{{
              data.character.skin_color | titlecase
            }}&lt;/span>
          &lt;/div>
        &lt;/div>

        &lt;div
          class="tw-mt-6 tw-p-3 tw-bg-black/30 tw-border tw-border-rebel-yellow/20 tw-rounded"
        >
          &lt;div class="tw-flex tw-items-center tw-mb-2">
            &lt;mat-icon class="tw-text-rebel-yellow/70 tw-mr-2">info&lt;/mat-icon>
            &lt;span class="tw-text-rebel-yellow/70 tw-text-sm"
              >IMPERIAL RECORDS&lt;/span
            >
          &lt;/div>
          &lt;p class="tw-text-white/70 tw-text-sm tw-m-0">
            This individual has appeared in
            {{ data.character.films?.length || 0 }} documented incidents.
            &lt;span *ngIf="data.character.starships?.length">
              Known to operate
              {{ data.character.starships.length }} starship(s).
            &lt;/span>
          &lt;/p>
        &lt;/div>
      &lt;/mat-dialog-content>

      &lt;mat-dialog-actions
        align="end"
        class="tw-p-4 tw-border-t tw-border-rebel-yellow/30"
      >
        &lt;button mat-button mat-dialog-close class="tw-text-rebel-yellow">
          CLOSE
        &lt;/button>
      &lt;/mat-dialog-actions>
    &lt;/div>
  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
  styles<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      ::ng-deep .imperial-dialog {
        .mat-mdc-dialog-container {
          padding: 0;
          border-radius: 4px;
          overflow: hidden;
        }
      }
    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CharacterDetailComponent</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Inject</span></span><span class="token punctuation">(</span><span class="token constant">MAT_DIALOG_DATA</span><span class="token punctuation">)</span> <span class="token keyword">public</span> data<span class="token operator">:</span> <span class="token punctuation">{</span> character<span class="token operator">:</span> Character <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>Conclusion: Balancing Style and Performance</h2>
<p>In this transmission, we've accomplished two critical objectives for our Galactic Archives application:</p>
<ol>
<li>
<p><strong>Star Wars Theming</strong>: We've transformed our generic Angular Material application into an immersive Star Wars experience through custom theming, specialized typography, animated transitions, and space-inspired visual elements.</p>
</li>
<li>
<p><strong>Bundle Size Optimization</strong>: We've implemented multiple strategies to keep our application performant while adding rich styling features:</p>
<ul>
<li>Conditional loading of development tools like MSW</li>
<li>Font loading optimization</li>
<li>Centralized Material module imports</li>
<li>Improved RxJS subscription management with the takeUntil pattern</li>
<li>Realistic bundle budgets in angular.json</li>
</ul>
</li>
<li>
<p><strong>Test Compatibility</strong>: We've ensured our styling changes don't break existing tests:</p>
<ul>
<li>Updated unit tests to expect uppercase title text (&quot;GALACTIC ARCHIVES&quot; instead of &quot;Galactic Archives&quot;)</li>
<li>Added proper <code>data-testid</code> attributes to styled components for reliable e2e test selectors</li>
<li>Ensured Playwright tests can locate elements with the new styling</li>
</ul>
</li>
</ol>
<h3>Test Fixes for Styling Changes</h3>
<p>When implementing UI changes, we need to ensure our tests remain compatible. Here are the key fixes we made:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// app.component.spec.ts - Updated title case expectation</span>
<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"should have the correct title"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fixture <span class="token operator">=</span> TestBed<span class="token punctuation">.</span><span class="token function">createComponent</span><span class="token punctuation">(</span>AppComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
  fixture<span class="token punctuation">.</span><span class="token function">detectChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> compiled <span class="token operator">=</span> fixture<span class="token punctuation">.</span>nativeElement <span class="token keyword">as</span> HTMLElement<span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>compiled<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"h1"</span><span class="token punctuation">)</span><span class="token operator">?.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span>
    <span class="token string">"GALACTIC ARCHIVES"</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// e2e/app.spec.ts - Updated e2e test for title case</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"has title"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Wait for the title to be visible</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">"h1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContainText</span><span class="token punctuation">(</span><span class="token string">"GALACTIC ARCHIVES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- character-list.component.html - Added data-testid attribute --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span>
  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-text-2xl tw-text-yellow-400 tw-mb-0 tw-tracking-widest<span class="token punctuation">"</span></span>
  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>database-title<span class="token punctuation">"</span></span>
  <span class="token attr-name">data-testid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>character-list-heading<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span>
  GALACTIC PERSONNEL DATABASE
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre>
<p>The result is a visually compelling application that maintains excellent performance metrics. Our initial bundle size is now 850.72 kB, which is well within our adjusted budget of 850 kB warning threshold.</p>
<p>Remember that optimization is an ongoing process. As your application grows, continue monitoring bundle size and implementing additional optimizations as needed. Tools like source-map-explorer or webpack-bundle-analyzer can provide deeper insights into what's contributing to your bundle size.</p>
<p>May the Force be with your Angular applications, and may they always load quickly!</p>
<p>This creates a dialog that looks like an Imperial terminal display.</p>
<h2>Custom Scrollbar Styling</h2>
<p>Let's add custom scrollbars to enhance the futuristic feel:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// Add to global styles.scss</span>
<span class="token operator">*</span> <span class="token punctuation">{</span>
  scrollbar<span class="token operator">-</span>width<span class="token operator">:</span> thin<span class="token punctuation">;</span>
  scrollbar<span class="token operator">-</span>color<span class="token operator">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">193</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">*</span><span class="token operator">:</span><span class="token operator">:</span><span class="token operator">-</span>webkit<span class="token operator">-</span>scrollbar <span class="token punctuation">{</span>
  width<span class="token operator">:</span> 8px<span class="token punctuation">;</span>
  height<span class="token operator">:</span> 8px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">*</span><span class="token operator">:</span><span class="token operator">:</span><span class="token operator">-</span>webkit<span class="token operator">-</span>scrollbar<span class="token operator">-</span>track <span class="token punctuation">{</span>
  background<span class="token operator">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">*</span><span class="token operator">:</span><span class="token operator">:</span><span class="token operator">-</span>webkit<span class="token operator">-</span>scrollbar<span class="token operator">-</span>thumb <span class="token punctuation">{</span>
  background<span class="token operator">-</span>color<span class="token operator">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">193</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  border<span class="token operator">-</span>radius<span class="token operator">:</span> 4px<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>This creates thin, yellow scrollbars that match our theme.</p>
<h2>Typography Enhancements</h2>
<p>Let's add some Star Wars-inspired typography:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// Add to global styles.scss</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">font</span></span><span class="token operator">-</span>face <span class="token punctuation">{</span>
  font<span class="token operator">-</span>family<span class="token operator">:</span> <span class="token string">'SF Distant Galaxy'</span><span class="token punctuation">;</span>
  src<span class="token operator">:</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'/assets/fonts/SFDistantGalaxy.woff2'</span><span class="token punctuation">)</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  font<span class="token operator">-</span>weight<span class="token operator">:</span> normal<span class="token punctuation">;</span>
  font<span class="token operator">-</span>style<span class="token operator">:</span> normal<span class="token punctuation">;</span>
  font<span class="token operator">-</span>display<span class="token operator">:</span> swap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">.</span>sw<span class="token operator">-</span>heading <span class="token punctuation">{</span>
  font<span class="token operator">-</span>family<span class="token operator">:</span> <span class="token string">'SF Distant Galaxy'</span><span class="token punctuation">,</span> sans<span class="token operator">-</span>serif<span class="token punctuation">;</span>
  letter<span class="token operator">-</span>spacing<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span>05em<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>And apply it to our headings:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span>
  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-text-rebel-yellow tw-text-4xl tw-font-bold tw-tracking-wider tw-mb-2 sw-heading<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span>
  GALACTIC ARCHIVES
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre>
<h2>Cosmic Compiler Summary</h2>
<ul>
<li>We've <strong>created a custom theme</strong> inspired by Star Wars</li>
<li>We've <strong>added animated transitions</strong> for a more dynamic interface</li>
<li>We've <strong>implemented custom loading indicators</strong> with a Star Wars aesthetic</li>
<li>We've <strong>enhanced the character detail view</strong> with an Imperial terminal design</li>
<li>We've <strong>added visual polish</strong> with custom scrollbars, typography, and backgrounds</li>
</ul>
<blockquote>
<p>The Cosmic Compiler gazed upon our themed application with what could only be described as aesthetic appreciation. &quot;Visual design,&quot; it observed, &quot;is not merely decoration, but communication. Your interface now speaks the language of Star Wars, creating an immersive experience that transcends mere functionality.&quot; Several junior developers exchanged glances, surprised by the Compiler's unexpected foray into design philosophy.</p>
</blockquote>
<h2>Next Steps</h2>
<p>With theming and visual polish in place, our Galactic Archives have transformed from a functional data table into an immersive Star Wars experience. In our next and final transmission, we'll deploy our application to production, optimize it for performance, and reflect on our journey through the Angular galaxy.</p>
<p>Until then, may your builds be green and your runtime errors few.</p>
</content>
  </entry>  <entry>
    <title>Galactic Archives - Implementing Filtering</title>
    <link href="https://aaronmaturen.com/musings/post-10-implementing-filtering/"/>
    <updated>2025-06-10T00:00:00Z</updated>
    <id>https://aaronmaturen.com/musings/post-10-implementing-filtering/</id>
    <content type="html"><h1>Angular DataSource with SWAPI: Building the Galactic Archives - Implementing Advanced Filtering</h1>
<p><em>In the vastness of the galactic archives, finding specific information without proper filtering is like searching for a specific grain of sand on Tatooine. As our collection of character data grows, we need more sophisticated ways to sift through it all.</em></p>
<blockquote>
<p>The Cosmic Compiler once remarked that a table without filtering is merely a static display of data, not much different from ancient scrolls carved in stone. &quot;True power,&quot; it whispered, &quot;comes from giving users control over what they see.&quot;</p>
</blockquote>
<h2>The Need for Filtering</h2>
<p>With pagination and sorting in place, our Galactic Archives are becoming increasingly useful. But our usersâ€”rebel intelligence officers, imperial bureaucrats, and curious padawans alikeâ€”need to quickly find specific characters based on various attributes. They might want to find all human characters, or everyone from a specific planet, or perhaps all characters above a certain height.</p>
<p>In this transmission, we'll implement advanced filtering capabilities that will allow users to:</p>
<ol>
<li>Filter by text across multiple fields</li>
<li>Apply debouncing to prevent excessive API calls</li>
<li>Integrate filtering with our existing pagination and sorting</li>
</ol>
<p>Let's begin by adding a search input to our component template.</p>
<h2>Adding the Search Input</h2>
<p>First, we'll add a search input above our table:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-mb-4 tw-flex tw-items-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-form-field</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-w-full<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-label</span><span class="token punctuation">></span></span>Search Characters<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-label</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
      <span class="token attr-name">matInput</span>
      <span class="token attr-name">[formControl]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchControl<span class="token punctuation">"</span></span>
      <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Search by name, gender, etc.<span class="token punctuation">"</span></span>
      <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Search characters<span class="token punctuation">"</span></span>
    <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-icon</span> <span class="token attr-name">matPrefix</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-mr-2 tw-text-yellow-400<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>search<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-icon</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
      <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchControl.value<span class="token punctuation">"</span></span>
      <span class="token attr-name">matSuffix</span>
      <span class="token attr-name">mat-icon-button</span>
      <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Clear<span class="token punctuation">"</span></span>
      <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clearSearch()<span class="token punctuation">"</span></span>
    <span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-icon</span><span class="token punctuation">></span></span>close<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-icon</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-form-field</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>This search input uses Angular Material's <code>mat-form-field</code> with a few key features:</p>
<ul>
<li>A search icon prefix using <code>matPrefix</code></li>
<li>A clear button that appears only when there's text in the input</li>
<li>Proper ARIA labels for accessibility</li>
<li>Tailwind CSS classes prefixed with <code>tw-</code> for styling</li>
</ul>
<blockquote>
<p>The Ancient Order of Angular teaches that inputs without proper accessibility attributes are like lightsabers without handlesâ€”dangerous to everyone involved and likely to cause harm in unexpected ways.</p>
</blockquote>
<h2>Setting Up the Form Control</h2>
<p>Next, we need to update our component class to handle the search functionality. We'll use a <code>FormControl</code> to manage the search input's state and value:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> FormControl <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/forms'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> debounceTime<span class="token punctuation">,</span> distinctUntilChanged<span class="token punctuation">,</span> tap <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span>

<span class="token comment">// Inside the component class</span>
<span class="token class-name">searchControl</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormControl</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token comment">// Set up search with debouncing</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>searchControl<span class="token punctuation">.</span>valueChanges<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
    <span class="token function">debounceTime</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Wait 300ms after the last event before emitting</span>
    <span class="token function">distinctUntilChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Only emit if value has changed</span>
    <span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>paginator<span class="token punctuation">.</span>pageIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Reset to first page on new search</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">clearSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>searchControl<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>This implementation includes several important features:</p>
<ol>
<li><strong>Debouncing</strong> with <code>debounceTime(300)</code> to prevent excessive API calls while the user is typing</li>
<li><strong>Distinct values only</strong> with <code>distinctUntilChanged()</code> to avoid redundant searches</li>
<li><strong>Page reset</strong> to ensure users see the first page of filtered results</li>
<li>A <strong>clear search method</strong> that resets the search input</li>
</ol>
<p>Don't forget to import the ReactiveFormsModule in your component:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// In component metadata</span>
imports<span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token comment">// ... other imports</span>
  ReactiveFormsModule<span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<h2>Updating the DataSource</h2>
<p>Now we need to modify our <code>loadCharacters</code> method to include the search term:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token function">loadCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
  <span class="token comment">// Get current page, sort, and filter information</span>
  <span class="token keyword">const</span> pageIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paginator<span class="token operator">?.</span>pageIndex <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> pageSize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paginator<span class="token operator">?.</span>pageSize <span class="token operator">??</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageSize<span class="token punctuation">;</span>
  <span class="token keyword">const</span> sortActive <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sort<span class="token operator">?.</span>active <span class="token operator">??</span> <span class="token string">''</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> sortDirection <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sort<span class="token operator">?.</span>direction <span class="token operator">??</span> <span class="token string">''</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> filter <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>searchControl<span class="token operator">?.</span>value <span class="token operator">??</span> <span class="token string">''</span><span class="token punctuation">;</span>

  <span class="token comment">// SWAPI uses 1-based pagination, but MatPaginator is 0-based</span>
  <span class="token keyword">const</span> swapiPage <span class="token operator">=</span> pageIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token comment">// Tell our DataSource to load the characters with all parameters</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">.</span><span class="token function">loadCharacters</span><span class="token punctuation">(</span>swapiPage<span class="token punctuation">,</span> sortActive<span class="token punctuation">,</span> sortDirection<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>We've updated the method to extract the filter value from our search control and pass it to the DataSource.</p>
<h2>Enhancing the GalacticDataSource</h2>
<p>Finally, we need to update our <code>GalacticDataSource</code> to handle filtering. The SWAPI API actually supports searching by name using the <code>name=</code> parameter (not <code>search=</code> as you might expect), so we'll use that for server-side filtering when possible. We also need to handle the different response structure that comes back from search queries versus regular queries:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/features/star-wars/datasources/galactic.datasource.ts</span>
<span class="token comment">/**
 * Load characters from the API with pagination, sorting, and filtering
 * @param page The page number to load (1-based for SWAPI)
 * @param sortField The field to sort by
 * @param sortDirection The direction to sort ('asc' or 'desc')
 * @param filter Optional filter term
 */</span>
<span class="token function">loadCharacters</span><span class="token punctuation">(</span>page<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sortField<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> sortDirection<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> filter<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>pageSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Always replace data when using pagination or filtering</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>charactersSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// SWAPI API supports searching by name using the 'name=' parameter</span>
  <span class="token keyword">const</span> request$ <span class="token operator">=</span> filter
    <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>starWarsService<span class="token punctuation">.</span><span class="token function">searchCharacters</span><span class="token punctuation">(</span>filter<span class="token punctuation">,</span> page<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageSizeSubject<span class="token punctuation">.</span>value<span class="token punctuation">,</span> sortField<span class="token punctuation">,</span> sortDirection<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>starWarsService<span class="token punctuation">.</span><span class="token function">getCharacters</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageSizeSubject<span class="token punctuation">.</span>value<span class="token punctuation">,</span> sortField<span class="token punctuation">,</span> sortDirection<span class="token punctuation">)</span><span class="token punctuation">;</span>

  request$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
    <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> characters<span class="token operator">:</span> Character<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> totalCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

      <span class="token comment">// Handle different response structures for search vs regular queries</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'result'</span> <span class="token keyword">in</span> response <span class="token operator">&amp;&amp;</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Search response structure</span>
        characters <span class="token operator">=</span> response<span class="token punctuation">.</span>result
          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=></span> item<span class="token punctuation">.</span>properties<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">:</span> char <span class="token keyword">is</span> Character <span class="token operator">=></span> char <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        totalCount <span class="token operator">=</span> characters<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'results'</span> <span class="token keyword">in</span> response <span class="token operator">&amp;&amp;</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Regular response structure</span>
        characters <span class="token operator">=</span> response<span class="token punctuation">.</span>results
          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=></span> item<span class="token punctuation">.</span>properties<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">:</span> char <span class="token keyword">is</span> Character <span class="token operator">=></span> char <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        totalCount <span class="token operator">=</span> response<span class="token punctuation">.</span>total_records <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// Apply client-side sorting if sort parameters are provided</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>sortField <span class="token operator">&amp;&amp;</span> sortDirection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        characters <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sortData</span><span class="token punctuation">(</span>characters<span class="token punctuation">,</span> sortField<span class="token punctuation">,</span> sortDirection<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span>charactersSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>characters<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>countSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>totalCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error loading characters:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * Filter data client-side based on the provided filter term
 * @param data The array of characters to filter
 * @param filterTerm The term to filter by
 * @returns The filtered array
 */</span>
<span class="token keyword">private</span> <span class="token function">filterData</span><span class="token punctuation">(</span>characters<span class="token operator">:</span> Character<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> filterTerm<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Character<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> term <span class="token operator">=</span> filterTerm<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> characters<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>character <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// Check common text fields</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      character<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>term<span class="token punctuation">)</span> <span class="token operator">||</span>
      character<span class="token punctuation">.</span>gender<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>term<span class="token punctuation">)</span> <span class="token operator">||</span>
      character<span class="token punctuation">.</span>birth_year<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>term<span class="token punctuation">)</span> <span class="token operator">||</span>
      character<span class="token punctuation">.</span>eye_color<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>term<span class="token punctuation">)</span> <span class="token operator">||</span>
      character<span class="token punctuation">.</span>hair_color<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>term<span class="token punctuation">)</span> <span class="token operator">||</span>
      character<span class="token punctuation">.</span>skin_color<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>term<span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Check numeric fields (convert to string first)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      <span class="token function">String</span><span class="token punctuation">(</span>character<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>term<span class="token punctuation">)</span> <span class="token operator">||</span>
      <span class="token function">String</span><span class="token punctuation">(</span>character<span class="token punctuation">.</span>mass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>term<span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>This implementation:</p>
<ol>
<li>Uses the SWAPI search endpoint when a filter is provided</li>
<li>Applies additional client-side filtering to check other fields</li>
<li>Maintains compatibility with our existing sorting functionality</li>
</ol>
<blockquote>
<p>A member of the Council of Patterns once said, &quot;The true power of the DataSource pattern is revealed when filtering, sorting, and pagination work in harmony.&quot; Another council member replied, &quot;Yes, but the true test is how it handles the edge cases.&quot; The room fell silent as everyone contemplated that one user who would inevitably search for &quot;Skywalker&quot; while sorting by height in descending order on page 3.</p>
</blockquote>
<h2>Testing Our Filtering Implementation</h2>
<p>To ensure our filtering works correctly, we should add a test:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/features/star-wars/components/character-list/character-list.component.spec.ts</span>
<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"should filter data when search input changes"</span><span class="token punctuation">,</span> <span class="token function">fakeAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Arrange</span>
  <span class="token keyword">const</span> fixture <span class="token operator">=</span> TestBed<span class="token punctuation">.</span><span class="token function">createComponent</span><span class="token punctuation">(</span>CharacterListComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> component <span class="token operator">=</span> fixture<span class="token punctuation">.</span>componentInstance<span class="token punctuation">;</span>
  <span class="token keyword">const</span> dataSourceSpy <span class="token operator">=</span> <span class="token function">spyOn</span><span class="token punctuation">(</span>
    component<span class="token punctuation">.</span>dataSource<span class="token punctuation">,</span>
    <span class="token string">"loadCharacters"</span>
  <span class="token punctuation">)</span><span class="token punctuation">.</span>and<span class="token punctuation">.</span><span class="token function">callThrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  fixture<span class="token punctuation">.</span><span class="token function">detectChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Act - simulate search input</span>
  component<span class="token punctuation">.</span>searchControl<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"Luke"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tick</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Wait for debounce time</span>
  fixture<span class="token punctuation">.</span><span class="token function">detectChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Assert</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>dataSourceSpy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span>paginator<span class="token punctuation">.</span>pageIndex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Should reset to first page</span>

  <span class="token comment">// Check that the last call included the search term</span>
  <span class="token keyword">const</span> lastCall <span class="token operator">=</span> dataSourceSpy<span class="token punctuation">.</span>calls<span class="token punctuation">.</span><span class="token function">mostRecent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>lastCall<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">"Luke"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The 4th argument should be the filter term</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>This test verifies that:</p>
<ol>
<li>Changing the search input triggers the <code>loadCharacters</code> method</li>
<li>The paginator resets to the first page when filtering changes</li>
<li>The search term is correctly passed to the DataSource</li>
</ol>
<h2>Enhancing the UI for Filtering</h2>
<p>Let's add some visual feedback to show when filtering is active:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-mb-2 tw-flex tw-justify-between tw-items-center<span class="token punctuation">"</span></span>
  <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchControl.value<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-text-yellow-400<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-icon</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-align-middle tw-mr-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>filter_list<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-icon</span><span class="token punctuation">></span></span>
    Filtering results for "{{ searchControl.value }}"
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">mat-button</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accent<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clearSearch()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    Clear Filter
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>This adds a helpful message showing the current filter term and provides another way to clear the filter.</p>
<h2>Cosmic Compiler Summary</h2>
<ul>
<li>We've <strong>implemented advanced filtering</strong> for our Galactic Archives table</li>
<li>We've <strong>added debouncing</strong> to prevent excessive API calls while typing</li>
<li>We've <strong>integrated filtering with pagination and sorting</strong> for a seamless experience</li>
<li>We've <strong>enhanced the UI</strong> with visual feedback for active filters</li>
<li>We've <strong>maintained accessibility</strong> with proper ARIA labels and keyboard support</li>
<li>We've <strong>handled different API response structures</strong> for search vs regular queries</li>
<li>We've <strong>used the correct <code>name=</code> parameter</strong> for SWAPI search functionality</li>
</ul>
<blockquote>
<p>The Cosmic Compiler reviewed our filtering implementation with unusual interest. &quot;A proper search function,&quot; it noted, &quot;is the difference between a data dump and a useful tool.&quot; It paused, then added, &quot;The debouncing is particularly elegantâ€”not triggering API calls with every keystroke shows respect for both the server and the user.&quot; Several junior developers frantically scribbled notes, having never before heard the Compiler use the word &quot;elegant.&quot;</p>
</blockquote>
<h2>Next Steps</h2>
<p>With filtering, sorting, and pagination in place, our Galactic Archives have become a powerful tool for exploring the Star Wars universe. But there's still more we can do to enhance the user experience. In our next transmission, we'll implement keyboard navigation and accessibility improvements to ensure our application is usable by all beings across the galaxy, regardless of their input methods or assistive technologies.</p>
<p>Until then, may your builds be green and your runtime errors few.</p>
</content>
  </entry>  <entry>
    <title>Galactic Archives - Adding Sorting</title>
    <link href="https://aaronmaturen.com/musings/post-9-adding-sorting/"/>
    <updated>2025-06-09T00:00:00Z</updated>
    <id>https://aaronmaturen.com/musings/post-9-adding-sorting/</id>
    <content type="html"><h1>Angular DataSource with SWAPI: Building the Galactic Archives - Adding Sorting Capabilities</h1>
<p><em>In the vast expanse of the Galactic Archives, chaos reigns when data lacks order. As any seasoned Imperial data analyst knows, the difference between finding a specific Jedi's record in seconds versus hours comes down to one critical feature: sorting. Today, we'll bring order to our galaxy of data.</em></p>
<h2>The Unsorted Galaxy Problem</h2>
<p>Our Galactic Archives have come a long way. We've implemented a robust DataSource pattern and added pagination to navigate through our vast collection of character records. But our usersâ€”primarily Imperial officers with tight schedules and low patienceâ€”have been filing complaints faster than stormtroopers miss blaster shots:</p>
<p>&quot;How am I supposed to find the tallest potential recruits?&quot;
&quot;Can I sort by birth year to identify the most experienced operatives?&quot;
&quot;Why can't I organize these rebels alphabetically for my wanted posters?&quot;</p>
<p>Without sorting capabilities, our otherwise impressive data table is like a library where books are shelved in the order they were publishedâ€”technically functional but practically maddening.</p>
<blockquote>
<p>The Cosmic Compiler once reviewed an unsorted data table and simply printed: &quot;A table without sorting is like a starship without navigationâ€”you have the power to travel, but no control over your destination.&quot; The junior developer responsible was found the next day, still staring blankly at their monitor, muttering about &quot;natural ordering&quot; and &quot;comparative algorithms.&quot;</p>
</blockquote>
<h2>Enter MatSort: The Imperial Organizer</h2>
<p>Angular Material's <code>MatSort</code> directive is our answer to this organizational chaos. It provides a standardized way to add sorting capabilities to tables with minimal effort. Think of it as the Imperial bureaucracy of data organizationâ€”rigid, efficient, and surprisingly effective when implemented correctly.</p>
<p>Let's start by updating our component imports to include the necessary sorting modules:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/features/star-wars/components/character-list/character-list.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  Component<span class="token punctuation">,</span>
  OnInit<span class="token punctuation">,</span>
  OnDestroy<span class="token punctuation">,</span>
  ViewChild<span class="token punctuation">,</span>
  AfterViewInit<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/core"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CommonModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/common"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatTableModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/table"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatProgressSpinnerModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/progress-spinner"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatPaginatorModule<span class="token punctuation">,</span> MatPaginator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/paginator"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatSortModule<span class="token punctuation">,</span> MatSort <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/sort"</span><span class="token punctuation">;</span> <span class="token comment">// Add this import</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatIconModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/icon"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> StarWarsService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../../../core/services/star-wars.service"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> GalacticDataSource <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../datasources/galactic.datasource"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Character <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../../../core/models/character.interface"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Subscription <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"rxjs"</span><span class="token punctuation">;</span></code></pre>
<p>Notice we've added <code>MatSortModule</code> and <code>MatSort</code> to our imports. The module provides the directives needed for sorting, while the <code>MatSort</code> class gives us a reference to the sorting state.</p>
<p>Next, we need to update our component's metadata to include the new module:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">'app-character-list'</span><span class="token punctuation">,</span>
  standalone<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
    CommonModule<span class="token punctuation">,</span>
    MatTableModule<span class="token punctuation">,</span>
    MatProgressSpinnerModule<span class="token punctuation">,</span>
    MatPaginatorModule<span class="token punctuation">,</span>
    MatSortModule<span class="token punctuation">,</span> <span class="token comment">// Add this import</span>
    MatIconModule
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// ... template and styles</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>Now, let's add a <code>ViewChild</code> reference to capture the <code>MatSort</code> instance from our template:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CharacterListComponent</span>
  <span class="token keyword">implements</span> <span class="token class-name">OnInit</span><span class="token punctuation">,</span> AfterViewInit<span class="token punctuation">,</span> OnDestroy
<span class="token punctuation">{</span>
  <span class="token comment">// Existing properties...</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ViewChild</span></span><span class="token punctuation">(</span>MatPaginator<span class="token punctuation">)</span> paginator<span class="token operator">!</span><span class="token operator">:</span> MatPaginator<span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ViewChild</span></span><span class="token punctuation">(</span>MatSort<span class="token punctuation">)</span> sort<span class="token operator">!</span><span class="token operator">:</span> MatSort<span class="token punctuation">;</span> <span class="token comment">// Add this line</span>

  <span class="token comment">// Rest of the component...</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<p>The Ancient Order of Angular teaches that the <code>!</code> operator is not just a TypeScript non-null assertion but a solemn promise to the compiler that you, the developer, take full responsibility for any runtime null reference exceptions. &quot;Use it wisely,&quot; they warn, &quot;for with great assertion comes great debugging responsibility.&quot;</p>
</blockquote>
<h2>Updating the Template</h2>
<p>Now we need to update our template to include the sorting directives. This involves two key changes:</p>
<ol>
<li>Adding the <code>matSort</code> directive to the table element</li>
<li>Adding <code>mat-sort-header</code> to each column header we want to be sortable</li>
</ol>
<p>Here's how we update our table element:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">mat-table</span> <span class="token attr-name">[dataSource]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">matSort</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-w-full<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre>
<p>The <code>matSort</code> directive tells Angular Material that this table should support sorting. Next, we need to update each column header that we want to be sortable. Let's modify our name column as an example:</p>
<pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- Name Column --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-container</span> <span class="token attr-name">matColumnDef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span>
    <span class="token attr-name">mat-header-cell</span>
    <span class="token attr-name">*matHeaderCellDef</span>
    <span class="token attr-name">mat-sort-header</span>
    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-text-yellow-400<span class="token punctuation">"</span></span>
  <span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-flex tw-items-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-icon</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-mr-1 tw-text-base tw-text-yellow-400<span class="token punctuation">"</span></span>
        <span class="token punctuation">></span></span>person<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-icon</span>
      <span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>NAME<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span>
    <span class="token attr-name">mat-cell</span>
    <span class="token attr-name">*matCellDef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let character<span class="token punctuation">"</span></span>
    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-text-yellow-400 tw-font-medium<span class="token punctuation">"</span></span>
  <span class="token punctuation">></span></span>
    {{ character.name }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-container</span><span class="token punctuation">></span></span></code></pre>
<p>Notice the addition of <code>mat-sort-header</code> to the <code>th</code> element. This transforms our plain header into a clickable sorting control. Let's do the same for our other columns:</p>
<pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- Gender Column --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-container</span> <span class="token attr-name">matColumnDef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span>
    <span class="token attr-name">mat-header-cell</span>
    <span class="token attr-name">*matHeaderCellDef</span>
    <span class="token attr-name">mat-sort-header</span>
    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-text-yellow-400<span class="token punctuation">"</span></span>
  <span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-flex tw-items-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-icon</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-mr-1 tw-text-base tw-text-yellow-400<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>wc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-icon</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>GENDER<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">mat-cell</span> <span class="token attr-name">*matCellDef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let character<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ character.gender }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-container</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- Birth Year Column --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-container</span> <span class="token attr-name">matColumnDef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birth_year<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span>
    <span class="token attr-name">mat-header-cell</span>
    <span class="token attr-name">*matHeaderCellDef</span>
    <span class="token attr-name">mat-sort-header</span>
    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-text-yellow-400<span class="token punctuation">"</span></span>
  <span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-flex tw-items-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-icon</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-mr-1 tw-text-base tw-text-yellow-400<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>cake<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-icon</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>BIRTH YEAR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">mat-cell</span> <span class="token attr-name">*matCellDef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let character<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ character.birth_year }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-container</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- Height Column --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-container</span> <span class="token attr-name">matColumnDef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>height<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span>
    <span class="token attr-name">mat-header-cell</span>
    <span class="token attr-name">*matHeaderCellDef</span>
    <span class="token attr-name">mat-sort-header</span>
    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-text-yellow-400<span class="token punctuation">"</span></span>
  <span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-flex tw-items-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-icon</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-mr-1 tw-text-base tw-text-yellow-400<span class="token punctuation">"</span></span>
        <span class="token punctuation">></span></span>height<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-icon</span>
      <span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>HEIGHT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">mat-cell</span> <span class="token attr-name">*matCellDef</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let character<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ character.height }}cm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-container</span><span class="token punctuation">></span></span></code></pre>
<blockquote>
<p>A member of the Council of Patterns once remarked, &quot;The beauty of declarative templates is that they hide the complexity of event binding and state management behind simple directives.&quot; Another council member replied, &quot;Yes, until you need to debug them.&quot; The room fell silent as the Cosmic Compiler nodded in solemn agreement.</p>
</blockquote>
<p>With these changes, our table headers now display sorting indicators and respond to clicks. But clicking them doesn't actually sort our data yet - we need to connect the sorting events to our DataSource.</p>
<h2>Connecting Sort Events to the DataSource</h2>
<p>Now we need to update our component's <code>ngAfterViewInit</code> method to listen for sort events and trigger data reloading when they occur. We'll also need to reset pagination when sorting changes, as users typically expect to see the first page of newly sorted data.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token function">ngAfterViewInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token comment">// Connect paginator and sort to our datasource after view init</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>paginator <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sort<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Reset to first page when sort changes</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>sort<span class="token punctuation">.</span>sortChange<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>paginator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>paginator<span class="token punctuation">.</span>pageIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Merge sort and paginator events to reload data</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
      <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sort<span class="token punctuation">.</span>sortChange<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paginator<span class="token punctuation">.</span>page<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
          <span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadCharacters</span><span class="token punctuation">(</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>paginator<span class="token punctuation">.</span>pageIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>paginator<span class="token punctuation">.</span>pageSize<span class="token punctuation">,</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>sort<span class="token punctuation">.</span>active<span class="token punctuation">,</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>sort<span class="token punctuation">.</span>direction
          <span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>This code does two important things:</p>
<ol>
<li>It resets the paginator to the first page whenever sorting changes</li>
<li>It merges the sort and paginator events into a single stream that triggers data loading</li>
</ol>
<p>The <code>merge</code> operator from RxJS combines multiple observables into one, so we can react to either sort or paginate events with the same logic. The <code>tap</code> operator lets us execute a side effect (loading data) without affecting the stream.</p>
<p>We've also updated our <code>loadCharacters</code> method to pass the sort information to our DataSource:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token function">loadCharacters</span><span class="token punctuation">(</span>
  page<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  pageSize<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageSize<span class="token punctuation">,</span>
  sortField<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>
  sortDirection<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">''</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// Update the page size if it changed</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pageSize <span class="token operator">=</span> pageSize<span class="token punctuation">;</span>
    <span class="token comment">// Let the DataSource handle loading the data with sort parameters</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">.</span><span class="token function">loadCharacters</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> sortField<span class="token punctuation">,</span> sortDirection<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Failed to load characters: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error <span class="token keyword">instanceof</span> <span class="token class-name">Error</span> <span class="token operator">?</span> error<span class="token punctuation">.</span>message <span class="token operator">:</span> <span class="token string">'Unknown error'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. The Cosmic Compiler is displeased.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>We've updated the method to extract the active sort column and direction from our <code>MatSort</code> instance, then pass those values to the DataSource.</p>
<blockquote>
<p>The Recursive Philosopher once pondered, &quot;If a sort event triggers in a component, but no DataSource is listening, does it make a sound?&quot; After three days of contemplation, they concluded: &quot;No, but it does generate 17 console warnings about unhandled events.&quot;</p>
</blockquote>
<h2>Updating the DataSource</h2>
<p>Now comes the most important part: updating our <code>GalacticDataSource</code> to handle sorting. We need to modify the <code>loadCharacters</code> method to accept sort parameters and implement a custom sorting function.</p>
<p>First, let's update the method signature and implementation:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/features/star-wars/datasources/galactic-datasource.ts</span>
<span class="token comment">/**
 * Load characters from the API with pagination and sorting
 * @param page The page number to load (1-based for SWAPI)
 * @param sortField The field to sort by
 * @param sortDirection The direction to sort ('asc' or 'desc')
 * @param pageSize The number of items per page
 */</span>
<span class="token function">loadCharacters</span><span class="token punctuation">(</span>
  page<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  sortField<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>
  sortDirection<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>
  pageSize<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageSizeSubject<span class="token punctuation">.</span>value
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>pageSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>pageSizeSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Update sort state</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>sortField<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sortSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span> active<span class="token operator">:</span> sortField<span class="token punctuation">,</span> direction<span class="token operator">:</span> sortDirection <span class="token keyword">as</span> <span class="token string">'asc'</span> <span class="token operator">|</span> <span class="token string">'desc'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Log the request parameters for debugging</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Loading characters: page=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>page<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, pageSize=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pageSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, sort=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sortField<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, direction=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sortDirection<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Clear current data when loading new page</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>charactersSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>starWarsService
    <span class="token punctuation">.</span><span class="token function">getCharacters</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> subscription <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">next</span><span class="token operator">:</span> response <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token comment">// Get character data from response</span>
      <span class="token keyword">const</span> characters <span class="token operator">=</span> response<span class="token punctuation">.</span>results
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=></span> item<span class="token punctuation">.</span>properties<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">:</span> char <span class="token keyword">is</span> Character <span class="token operator">=></span> char <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Apply client-side sorting if needed</span>
      <span class="token keyword">const</span> sortedCharacters <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applySorting</span><span class="token punctuation">(</span>characters<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Update our subjects with the new data</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>charactersSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>sortedCharacters<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>countSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>total_records<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">error</span><span class="token operator">:</span> error <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error loading characters:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>charactersSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>countSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// Keep the current page and page size values to allow retry</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Add to our subscription for cleanup</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subscription<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>The key change here is that we're now accepting <code>sortField</code> and <code>sortDirection</code> parameters, and applying client-side sorting to the data after we receive it from the API. This is necessary because the SWAPI doesn't support server-side sorting.</p>
<p>Next, we need to implement the <code>sortData</code> method that will handle the actual sorting logic:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">/**
 * Apply sorting to the character data
 * @param characters The array of characters to sort
 * @returns The sorted array
 */</span>
<span class="token keyword">private</span> <span class="token function">applySorting</span><span class="token punctuation">(</span>characters<span class="token operator">:</span> Character<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Character<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> sort <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sortSubject<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sort <span class="token operator">||</span> <span class="token operator">!</span>sort<span class="token punctuation">.</span>active <span class="token operator">||</span> <span class="token operator">!</span>sort<span class="token punctuation">.</span>direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> characters<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>characters<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> sortField <span class="token operator">=</span> sort<span class="token punctuation">.</span>active<span class="token punctuation">;</span>
    <span class="token keyword">const</span> sortDirection <span class="token operator">=</span> sort<span class="token punctuation">.</span>direction <span class="token operator">===</span> <span class="token string">'asc'</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token comment">// Handle nested properties (not needed for current model but included for extensibility)</span>
    <span class="token keyword">const</span> <span class="token function-variable function">getPropertyValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> curr<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> prev <span class="token operator">?</span> prev<span class="token punctuation">[</span>curr<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Get values to compare</span>
    <span class="token keyword">let</span> valueA <span class="token operator">=</span> <span class="token function">getPropertyValue</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> sortField<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> valueB <span class="token operator">=</span> <span class="token function">getPropertyValue</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> sortField<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Handle special cases for our data types</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sortField <span class="token operator">===</span> <span class="token string">'height'</span> <span class="token operator">||</span> sortField <span class="token operator">===</span> <span class="token string">'mass'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Convert to numbers for numeric comparison, handling 'unknown' values</span>
      valueA <span class="token operator">=</span> valueA <span class="token operator">===</span> <span class="token string">'unknown'</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>valueA<span class="token punctuation">)</span><span class="token punctuation">;</span>
      valueB <span class="token operator">=</span> valueB <span class="token operator">===</span> <span class="token string">'unknown'</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>valueB<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sortField <span class="token operator">===</span> <span class="token string">'birth_year'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Handle 'BBY' (Before Battle of Yavin) format</span>
      valueA <span class="token operator">=</span> valueA <span class="token operator">===</span> <span class="token string">'unknown'</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">99999</span> <span class="token operator">:</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>valueA<span class="token punctuation">)</span><span class="token punctuation">;</span>
      valueB <span class="token operator">=</span> valueB <span class="token operator">===</span> <span class="token string">'unknown'</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">99999</span> <span class="token operator">:</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>valueB<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Compare the values</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>valueA <span class="token operator">&lt;</span> valueB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> sortDirection<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>valueA <span class="token operator">></span> valueB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">*</span> sortDirection<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>This implementation does several important things:</p>
<ol>
<li>It creates a copy of the data array before sorting to avoid mutating the original</li>
<li>It handles different data types appropriately (numbers vs. strings)</li>
<li>It supports nested properties through the <code>getPropertyValue</code> helper method</li>
<li>It applies the sort direction ('asc' or 'desc') to the comparison result</li>
</ol>
<blockquote>
<p>The Ancient Order of Angular whispers of a time when developers had to write their own sort functions for every table. &quot;The Great Sorting Crisis of 2014,&quot; they call it, when thousands of developers independently implemented the same bubble sort algorithm with slightly different bugs. The MatSort directive was created shortly thereafter, a beacon of hope in the darkness of manual DOM manipulation.</p>
</blockquote>
<h2>Making Sort Headers Visually Distinct</h2>
<p>While our sorting functionality works, we want to make the sort headers more visually distinct to improve the user experience. Let's add some custom styles to make them stand out and provide better feedback when interacting with them.</p>
<p>We can add these styles to our component:</p>
<pre class="language-typescript"><code class="language-typescript">styles<span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  .mat-mdc-row:nth-child(even) {
    background-color: rgba(255, 255, 255, 0.05);
  }

  .mat-mdc-row:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }

  .mat-mdc-cell, .mat-mdc-header-cell {
    color: rgba(255, 255, 255, 0.7);
    padding: 16px;
  }

  /* Custom sort header styles */
  .mat-sort-header-container {
    align-items: center;
  }

  .mat-sort-header-arrow {
    color: #fbbf24 !important; /* tw-yellow-400 */
  }

  th.mat-header-cell.mat-sort-header:hover {
    background-color: rgba(251, 191, 36, 0.1); /* tw-yellow-400 with opacity */
    cursor: pointer;
  }

  th.mat-header-cell.mat-sort-header-sorted {
    background-color: rgba(251, 191, 36, 0.15); /* tw-yellow-400 with opacity */
  }
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<p>These styles do several important things:</p>
<ol>
<li>They make the sort arrow yellow to match our Star Wars theme</li>
<li>They add a subtle hover effect to sort headers</li>
<li>They highlight the currently active sort column with a background color</li>
<li>They ensure proper alignment of the sort header content</li>
</ol>
<p>The Cosmic Compiler particularly appreciates when we maintain a consistent color theme throughout our application, so we're using the same <code>tw-yellow-400</code> color that we've been using for our text.</p>
<h2>Testing Our Sorting Implementation</h2>
<p>To ensure our sorting works correctly, we should test it with different data types and edge cases. Here's a simple test we can add to our component spec file:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/features/star-wars/components/character-list/character-list.component.spec.ts</span>
<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"should sort data when sort header is clicked"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Arrange</span>
  <span class="token keyword">const</span> fixture <span class="token operator">=</span> TestBed<span class="token punctuation">.</span><span class="token function">createComponent</span><span class="token punctuation">(</span>CharacterListComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> component <span class="token operator">=</span> fixture<span class="token punctuation">.</span>componentInstance<span class="token punctuation">;</span>
  <span class="token keyword">const</span> dataSourceSpy <span class="token operator">=</span> <span class="token function">spyOn</span><span class="token punctuation">(</span>
    component<span class="token punctuation">.</span>dataSource<span class="token punctuation">,</span>
    <span class="token string">"loadCharacters"</span>
  <span class="token punctuation">)</span><span class="token punctuation">.</span>and<span class="token punctuation">.</span><span class="token function">callThrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  fixture<span class="token punctuation">.</span><span class="token function">detectChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Act - simulate sort event</span>
  <span class="token keyword">const</span> sortHeader <span class="token operator">=</span> fixture<span class="token punctuation">.</span>debugElement<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"th.mat-sort-header"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sortHeader<span class="token punctuation">.</span><span class="token function">triggerEventHandler</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  fixture<span class="token punctuation">.</span><span class="token function">detectChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Assert</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>dataSourceSpy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span>paginator<span class="token punctuation">.</span>pageIndex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Should reset to first page</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>This test verifies that:</p>
<ol>
<li>Clicking a sort header triggers the <code>loadCharacters</code> method</li>
<li>The paginator resets to the first page when sorting changes</li>
</ol>
<h2>End-to-End Testing</h2>
<p>Unit tests are great for verifying component logic, but we also need to ensure our sorting works correctly in a real browser environment. Let's add some e2e tests using Playwright to verify our sorting functionality:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// e2e/sorting.spec.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@playwright/test"</span><span class="token punctuation">;</span>

test<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"Character List Sorting"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  test<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// Navigate to the character list page</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">"/characters"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Wait for the table to be visible</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForSelector</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> timeout<span class="token operator">:</span> <span class="token number">30000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"should sort characters by name"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// Get the initial order of character names</span>
    <span class="token keyword">const</span> initialNames <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$$eval</span><span class="token punctuation">(</span>
      <span class="token string">"table tbody tr td:first-child"</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>elements<span class="token punctuation">)</span> <span class="token operator">=></span> elements<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">=></span> el<span class="token punctuation">.</span>textContent<span class="token operator">?.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Click on the name column header to sort</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">'th:has-text("NAME")'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Wait for sorting to complete</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForTimeout</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get the sorted order of character names</span>
    <span class="token keyword">const</span> sortedNames <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$$eval</span><span class="token punctuation">(</span>
      <span class="token string">"table tbody tr td:first-child"</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>elements<span class="token punctuation">)</span> <span class="token operator">=></span> elements<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">=></span> el<span class="token punctuation">.</span>textContent<span class="token operator">?.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Verify the names are in alphabetical order</span>
    <span class="token keyword">const</span> sortedCopy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>sortedNames<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>sortedNames<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>sortedCopy<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"should sort characters by height"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// Get the initial order of character heights</span>
    <span class="token keyword">const</span> initialHeights <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$$eval</span><span class="token punctuation">(</span>
      <span class="token string">"table tbody tr td:nth-child(4)"</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>elements<span class="token punctuation">)</span> <span class="token operator">=></span> elements<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">=></span> el<span class="token punctuation">.</span>textContent<span class="token operator">?.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Click on the height column header to sort</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">'th:has-text("HEIGHT")'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Wait for sorting to complete</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForTimeout</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Extract numeric values for comparison (remove 'cm' and convert to numbers)</span>
    <span class="token keyword">const</span> <span class="token function-variable function">getNumericHeight</span> <span class="token operator">=</span> <span class="token punctuation">(</span>h<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">=></span>
      <span class="token function">parseFloat</span><span class="token punctuation">(</span>h<span class="token operator">?.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"cm"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Get the sorted heights after clicking the header</span>
    <span class="token keyword">const</span> sortedHeights <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">$$eval</span><span class="token punctuation">(</span>
      <span class="token string">"table tbody tr td:nth-child(4)"</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>elements<span class="token punctuation">)</span> <span class="token operator">=></span> elements<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">=></span> el<span class="token punctuation">.</span>textContent<span class="token operator">?.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Verify the heights are in ascending numeric order</span>
    <span class="token keyword">const</span> currentHeights <span class="token operator">=</span> sortedHeights<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>getNumericHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> sortedCopy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>currentHeights<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>currentHeights<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>sortedCopy<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>These tests verify that:</p>
<ol>
<li>Clicking on the name column header sorts the names alphabetically</li>
<li>Clicking on the height column header sorts the heights numerically</li>
<li>The sorting works correctly for both string and numeric data</li>
</ol>
<blockquote>
<p>The Cosmic Compiler reminds us: &quot;End-to-end tests are your final defense against the chaos of production. They verify not just that your code works in isolation, but that all the pieces work together as a harmonious whole.&quot;</p>
</blockquote>
<h2>Server-Side Sorting Support</h2>
<blockquote>
<p><strong>Technical Note:</strong> The actual SWAPI (Star Wars API) doesn't natively support sorting parameters. In a production environment, you'd either need to implement client-side sorting or use a backend proxy that adds sorting capabilities. For our tutorial, we've implemented sorting in our MSW mocks to simulate how a real API with sorting support would work.</p>
</blockquote>
<p>To ensure our sorting works with real API calls, we need to update our mock handlers to support sorting parameters:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/mocks/handlers.ts</span>
<span class="token comment">// Get sort parameters if they exist</span>
<span class="token keyword">const</span> sortField <span class="token operator">=</span> url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"sort_by"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sortDirection <span class="token operator">=</span> url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"sort_direction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Sort the characters if sort parameters are provided</span>
<span class="token keyword">let</span> sortedCharacters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>characters<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>sortField <span class="token operator">&amp;&amp;</span> sortDirection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  sortedCharacters<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// Use type assertion to handle property access</span>
    <span class="token keyword">const</span> aValue <span class="token operator">=</span> a<span class="token punctuation">.</span>properties<span class="token punctuation">[</span>sortField <span class="token keyword">as</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> a<span class="token punctuation">.</span>properties<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> bValue <span class="token operator">=</span> b<span class="token punctuation">.</span>properties<span class="token punctuation">[</span>sortField <span class="token keyword">as</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> b<span class="token punctuation">.</span>properties<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// Handle numeric sorting</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>aValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>bValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> sortDirection <span class="token operator">===</span> <span class="token string">"asc"</span>
        <span class="token operator">?</span> <span class="token function">Number</span><span class="token punctuation">(</span>aValue<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">Number</span><span class="token punctuation">(</span>bValue<span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>bValue<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">Number</span><span class="token punctuation">(</span>aValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Handle string sorting</span>
    <span class="token keyword">return</span> sortDirection <span class="token operator">===</span> <span class="token string">"asc"</span>
      <span class="token operator">?</span> <span class="token function">String</span><span class="token punctuation">(</span>aValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>bValue<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span>bValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>aValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>This mock handler implementation ensures that our API mocks properly support sorting, making our e2e tests more realistic and reliable.</p>
<p>We also need to update our <code>StarWarsService</code> to pass the sorting parameters to the API:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/core/services/star-wars.service.ts</span>
<span class="token function">getCharacters</span><span class="token punctuation">(</span>
  page<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  limit<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>
  sortField<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>
  sortDirection<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">''</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>ApiResponse<span class="token operator">&lt;</span>Character<span class="token operator">>></span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'page'</span><span class="token punctuation">,</span> page<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'limit'</span><span class="token punctuation">,</span> limit<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'expanded'</span><span class="token punctuation">,</span> <span class="token string">'true'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Add sort parameters if provided</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>sortField<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    params <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'sort_by'</span><span class="token punctuation">,</span> sortField<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>sortDirection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    params <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'sort_direction'</span><span class="token punctuation">,</span> sortDirection<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>ApiResponse<span class="token operator">&lt;</span>Character<span class="token operator">>></span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>apiUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">people</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Finally, we update our <code>GalacticDataSource</code> to pass the sorting parameters to the service:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/features/star-wars/datasources/galactic-datasource.ts</span>
<span class="token function">loadCharacters</span><span class="token punctuation">(</span>
  page<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  sortField<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>
  sortDirection<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>
  pageSize<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageSizeSubject<span class="token punctuation">.</span>value
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>pageSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>pageSizeSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>sortField<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sortSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span> active<span class="token operator">:</span> sortField<span class="token punctuation">,</span> direction<span class="token operator">:</span> sortDirection <span class="token keyword">as</span> <span class="token string">'asc'</span> <span class="token operator">|</span> <span class="token string">'desc'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>starWarsService
    <span class="token punctuation">.</span><span class="token function">getCharacters</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span> sortField<span class="token punctuation">,</span> sortDirection<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Handle the response...</span>
<span class="token punctuation">}</span></code></pre>
<h2>Cosmic Compiler Summary</h2>
<ul>
<li>We've <strong>implemented client-side sorting</strong> with MatSort for our Galactic Archives table</li>
<li>We've <strong>handled different data types</strong> in our sort function (strings vs. numbers)</li>
<li>We've <strong>dealt with nested properties</strong> in our character objects</li>
<li>We've <strong>made sort headers visually distinct</strong> with custom styling</li>
<li>We've <strong>connected sorting with pagination</strong> to create a seamless user experience</li>
<li>We've <strong>added e2e tests</strong> to verify sorting functionality in a real browser environment</li>
<li>We've <strong>implemented server-side sorting support</strong> in our mock handlers</li>
</ul>
<blockquote>
<p>The Cosmic Compiler reviewed our sorting implementation and, after a tense moment of silence, nodded approvingly. &quot;The code respects both the data and the user,&quot; it whispered. &quot;It handles edge cases gracefully and maintains visual consistency.&quot; The junior developers in the room let out a collective sigh of relief. The Compiler's approval is rare and precious.</p>
</blockquote>
<h2>Next Steps</h2>
<p>With sorting and pagination in place, our Galactic Archives are becoming increasingly powerful. But users are demanding more control over the data they see. In our next transmission, we'll implement filtering capabilities to allow users to search for specific characters based on various criteria. Prepare your quantum processors for &quot;Part 10: Implementing Advanced Filtering&quot; - where we'll teach our DataSource to sift through the noise and find the droids you're looking for.</p>
<p>Until then, may your builds be green and your runtime errors few.</p>
</content>
  </entry>  <entry>
    <title>Galactic Archives - Implementing Pagination</title>
    <link href="https://aaronmaturen.com/musings/post-8-implementing-pagination/"/>
    <updated>2025-06-08T00:00:00Z</updated>
    <id>https://aaronmaturen.com/musings/post-8-implementing-pagination/</id>
    <content type="html"><h1>Angular DataSource with SWAPI: Building the Galactic Archives - Implementing Pagination</h1>
<p><em>The Cosmic Compiler once observed that data without pagination is like a library without shelves - technically functional but practically unusable. As our collection of galactic characters grows, we need a more sophisticated way to present and navigate through them.</em></p>
<h2>From Cards to Tables: A Galactic Upgrade</h2>
<p>In our previous transmission, we implemented a basic DataSource to manage our Star Wars character data. We displayed this data using Material cards, which worked well for our initial prototype. However, as the Ancient Order of Angular teaches, &quot;When data grows structured, tables become the way.&quot;</p>
<p>Today, we'll transition from our card-based layout to a powerful MatTable implementation, which will allow us to:</p>
<ol>
<li>Display data in a structured, tabular format</li>
<li>Add pagination to navigate through large datasets</li>
<li>Prepare for sorting capabilities (coming in our next transmission)</li>
</ol>
<blockquote>
<p>A padawan developer once complained to the Council of Patterns about having to refactor a card layout to a table. &quot;But I've already built it!&quot; they protested. The Council replied, &quot;The code that cannot be refactored becomes the technical debt that cannot be repaid.&quot; The Cosmic Compiler, listening nearby, added a deprecation warning to the padawan's favorite component just to drive the point home.</p>
</blockquote>
<h2>The Anatomy of a Galactic Table</h2>
<p>Before diving into code, let's understand the key components we'll be working with:</p>
<ol>
<li><strong>MatTable</strong>: The core component that renders our data in rows and columns</li>
<li><strong>MatPaginator</strong>: Controls navigation between pages of data</li>
<li><strong>DataSource</strong>: Our existing class that will now feed data to the table</li>
</ol>
<p>Think of MatTable as the viewport of a starship - it only shows a small portion of the vast galaxy at any given time. The MatPaginator is like the navigation system, allowing us to jump to different sectors of space. Our DataSource is the ship's computer, fetching and processing the star charts we need.</p>
<h2>Implementing MatTable</h2>
<p>First, let's update our imports to include the necessary Material modules:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/features/star-wars/components/character-list/character-list.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> OnInit<span class="token punctuation">,</span> OnDestroy<span class="token punctuation">,</span> inject<span class="token punctuation">,</span> ViewChild<span class="token punctuation">,</span> AfterViewInit <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CommonModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatTableModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/material/table'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatProgressSpinnerModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/material/progress-spinner'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatPaginatorModule<span class="token punctuation">,</span> MatPaginator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/material/paginator'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatIconModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/material/icon'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> StarWarsService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../../../core/services/star-wars.service'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> GalacticDataSource <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../datasources/galactic-datasource'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Character <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../../../models/character.model'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Subscription <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span></code></pre>
<p>Notice we've added several new imports:</p>
<ul>
<li><code>MatTableModule</code> and <code>MatTable</code> for our table component</li>
<li><code>MatPaginatorModule</code> and <code>MatPaginator</code> for pagination</li>
<li><code>AfterViewInit</code> interface since we'll need to access the paginator after view initialization</li>
<li><code>ViewChild</code> which we'll use to get a reference to the paginator</li>
</ul>
<blockquote>
<p>The Cosmic Compiler once remarked, &quot;A component without proper imports is like a Jedi without a lightsaber - technically present but practically useless.&quot; Always double-check your imports before wondering why your component isn't working!</p>
</blockquote>
<p>@Component({
selector: 'app-character-list',
standalone: true,
imports: [
CommonModule,
MatTableModule,
MatProgressSpinnerModule,
MatPaginatorModule,
MatIconModule
],</p>
<pre><code>
Here we're setting up our component as a standalone component with the necessary imports. This follows the modern Angular approach of using standalone components rather than NgModules for better tree-shaking and more explicit dependencies.

Now let's look at the template where most of the magic happens:

```typescript
  template: `
    &lt;div class=&quot;tw-container tw-mx-auto tw-p-4&quot;&gt;
      &lt;h1 data-testid=&quot;character-list-heading&quot; class=&quot;tw-text-2xl tw-font-bold tw-mb-4&quot;&gt;
        Galactic Archives: Character Database
      &lt;/h1&gt;

      &lt;!-- Loading indicator --&gt;
      &lt;div *ngIf=&quot;loading &amp;&amp; !characters.length&quot; class=&quot;tw-flex tw-justify-center tw-my-8&quot;&gt;
        &lt;mat-spinner diameter=&quot;50&quot;&gt;&lt;/mat-spinner&gt;
      &lt;/div&gt;

      &lt;!-- Error message display --&gt;
      &lt;div
        *ngIf=&quot;error&quot;
        data-testid=&quot;error-message&quot;
        class=&quot;tw-bg-red-100 tw-border-l-4 tw-border-red-500 tw-text-red-700 tw-p-4 tw-mb-4&quot;
      &gt;
        {{ error }}
      &lt;/div&gt;
</code></pre>
<p>We start with a container for our component, a title, and handling for loading and error states. Notice we're using Tailwind CSS classes with the <code>tw-</code> prefix as per our project standards.</p>
<p>Next comes the table implementation:</p>
<pre class="language-typescript"><code class="language-typescript">      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Table container <span class="token keyword">with</span> Star Wars theme <span class="token operator">--</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-bg-white tw-rounded-lg tw-overflow-hidden tw-shadow-lg"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> The MatTable <span class="token keyword">with</span> our DataSource <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>table mat<span class="token operator">-</span>table <span class="token punctuation">[</span>dataSource<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-w-full"</span> data<span class="token operator">-</span>testid<span class="token operator">=</span><span class="token string">"character-table"</span><span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Name Column <span class="token operator">--</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>ng<span class="token operator">-</span>container matColumnDef<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>th mat<span class="token operator">-</span>header<span class="token operator">-</span>cell <span class="token operator">*</span>matHeaderCellDef <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-text-blue-700"</span><span class="token operator">></span>
              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-flex tw-items-center"</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>mat<span class="token operator">-</span>icon <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-mr-1 tw-text-base tw-text-blue-700"</span><span class="token operator">></span>person<span class="token operator">&lt;</span><span class="token operator">/</span>mat<span class="token operator">-</span>icon<span class="token operator">></span>
                <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token constant">NAME</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>
            <span class="token operator">&lt;</span>td
              mat<span class="token operator">-</span>cell
              <span class="token operator">*</span>matCellDef<span class="token operator">=</span><span class="token string">"let character"</span>
              <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-text-black tw-font-medium"</span>
              data<span class="token operator">-</span>testid<span class="token operator">=</span><span class="token string">"character-name"</span>
            <span class="token operator">></span>
              <span class="token punctuation">{</span><span class="token punctuation">{</span> character<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>ng<span class="token operator">-</span>container<span class="token operator">></span></code></pre>
<p>Here we begin our table implementation using <code>mat-table</code> and binding it to our DataSource. For each column, we define a <code>matColumnDef</code> with a unique name that matches the property in our <code>displayedColumns</code> array. Each column has both a header cell (<code>th</code>) and a data cell (<code>td</code>) template.</p>
<p>Let's continue with the remaining columns:</p>
<pre class="language-typescript"><code class="language-typescript">          <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Gender Column <span class="token operator">--</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>ng<span class="token operator">-</span>container matColumnDef<span class="token operator">=</span><span class="token string">"gender"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>th mat<span class="token operator">-</span>header<span class="token operator">-</span>cell <span class="token operator">*</span>matHeaderCellDef <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-text-blue-700"</span><span class="token operator">></span>
              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-flex tw-items-center"</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>mat<span class="token operator">-</span>icon <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-mr-1 tw-text-base tw-text-blue-700"</span><span class="token operator">></span>wc<span class="token operator">&lt;</span><span class="token operator">/</span>mat<span class="token operator">-</span>icon<span class="token operator">></span>
                <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token constant">GENDER</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>
            <span class="token operator">&lt;</span>td mat<span class="token operator">-</span>cell <span class="token operator">*</span>matCellDef<span class="token operator">=</span><span class="token string">"let character"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> character<span class="token punctuation">.</span>gender <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>ng<span class="token operator">-</span>container<span class="token operator">></span>

          <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Birth Year Column <span class="token operator">--</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>ng<span class="token operator">-</span>container matColumnDef<span class="token operator">=</span><span class="token string">"birth_year"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>th mat<span class="token operator">-</span>header<span class="token operator">-</span>cell <span class="token operator">*</span>matHeaderCellDef <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-text-blue-700"</span><span class="token operator">></span>
              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-flex tw-items-center"</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>mat<span class="token operator">-</span>icon <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-mr-1 tw-text-base tw-text-blue-700"</span><span class="token operator">></span>cake<span class="token operator">&lt;</span><span class="token operator">/</span>mat<span class="token operator">-</span>icon<span class="token operator">></span>
                <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token constant">BIRTH</span> <span class="token constant">YEAR</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>
            <span class="token operator">&lt;</span>td mat<span class="token operator">-</span>cell <span class="token operator">*</span>matCellDef<span class="token operator">=</span><span class="token string">"let character"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> character<span class="token punctuation">.</span>birth_year <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>ng<span class="token operator">-</span>container<span class="token operator">></span>

          <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Height Column <span class="token operator">--</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>ng<span class="token operator">-</span>container matColumnDef<span class="token operator">=</span><span class="token string">"height"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>th mat<span class="token operator">-</span>header<span class="token operator">-</span>cell <span class="token operator">*</span>matHeaderCellDef <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-text-blue-700"</span><span class="token operator">></span>
              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-flex tw-items-center"</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>mat<span class="token operator">-</span>icon <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-mr-1 tw-text-base tw-text-blue-700"</span><span class="token operator">></span>height<span class="token operator">&lt;</span><span class="token operator">/</span>mat<span class="token operator">-</span>icon<span class="token operator">></span>
                <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token constant">HEIGHT</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>
            <span class="token operator">&lt;</span>td mat<span class="token operator">-</span>cell <span class="token operator">*</span>matCellDef<span class="token operator">=</span><span class="token string">"let character"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> character<span class="token punctuation">.</span>height <span class="token punctuation">}</span><span class="token punctuation">}</span>cm<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>ng<span class="token operator">-</span>container<span class="token operator">></span></code></pre>
<p>We follow the same pattern for each column, using appropriate icons that match the data being displayed. Notice how we're using the Star Wars yellow color theme with <code>tw-text-yellow-400</code> for headers.</p>
<p>Now we need to define how rows should be rendered:</p>
<pre class="language-typescript"><code class="language-typescript">          <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Row definitions <span class="token operator">--</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>tr mat<span class="token operator">-</span>header<span class="token operator">-</span>row <span class="token operator">*</span>matHeaderRowDef<span class="token operator">=</span><span class="token string">"displayedColumns"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>
          <span class="token operator">&lt;</span>tr mat<span class="token operator">-</span>row <span class="token operator">*</span>matRowDef<span class="token operator">=</span><span class="token string">"let row; columns: displayedColumns;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>

          <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Row shown when there <span class="token keyword">is</span> no matching data <span class="token operator">--</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-mat-row"</span> <span class="token operator">*</span>matNoDataRow<span class="token operator">></span>
            <span class="token operator">&lt;</span>td <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-mat-cell tw-p-4 tw-text-center"</span> colspan<span class="token operator">=</span><span class="token string">"4"</span><span class="token operator">></span>
              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-flex tw-flex-col tw-items-center tw-py-8"</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>mat<span class="token operator">-</span>icon <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-text-4xl tw-text-gray-500 tw-mb-2"</span>
                  <span class="token operator">></span>sentiment_very_dissatisfied<span class="token operator">&lt;</span><span class="token operator">/</span>mat<span class="token operator">-</span>icon
                <span class="token operator">></span>
                <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-text-gray-500"</span><span class="token operator">></span>No characters found <span class="token keyword">in</span> the archives<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span>

        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Loading indicator <span class="token keyword">for</span> when data <span class="token keyword">is</span> loading but we have existing data <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>div <span class="token operator">*</span>ngIf<span class="token operator">=</span><span class="token string">"loading &amp;&amp; characters.length"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-flex tw-justify-center tw-py-4"</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>mat<span class="token operator">-</span>spinner diameter<span class="token operator">=</span><span class="token string">"30"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mat<span class="token operator">-</span>spinner<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Paginator <span class="token keyword">with</span> Star Wars theme <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>mat<span class="token operator">-</span>paginator
          <span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"totalCount"</span>
          <span class="token punctuation">[</span>pageSize<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"pageSize"</span>
          <span class="token punctuation">[</span>pageSizeOptions<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"[5, 10, 25]"</span>
          aria<span class="token operator">-</span>label<span class="token operator">=</span><span class="token string">"Select page of characters"</span>
          <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tw-bg-gray-100 tw-border-t tw-border-gray-200"</span>
        <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mat<span class="token operator">-</span>paginator<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">,
  styles: [
    </span><span class="token template-punctuation string">`</span></span>
      <span class="token punctuation">.</span>mat<span class="token operator">-</span>mdc<span class="token operator">-</span>row<span class="token operator">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        background<span class="token operator">-</span>color<span class="token operator">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.05</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token punctuation">.</span>mat<span class="token operator">-</span>mdc<span class="token operator">-</span>row<span class="token operator">:</span>hover <span class="token punctuation">{</span>
        background<span class="token operator">-</span>color<span class="token operator">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token punctuation">.</span>mat<span class="token operator">-</span>mdc<span class="token operator">-</span>cell<span class="token punctuation">,</span>
      <span class="token punctuation">.</span>mat<span class="token operator">-</span>mdc<span class="token operator">-</span>header<span class="token operator">-</span>cell <span class="token punctuation">{</span>
        color<span class="token operator">:</span> #<span class="token number">000000</span><span class="token punctuation">;</span>
        padding<span class="token operator">:</span> 16px<span class="token punctuation">;</span>
        border<span class="token operator">-</span>bottom<span class="token operator">:</span> 1px solid <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token punctuation">.</span>mat<span class="token operator">-</span>mdc<span class="token operator">-</span>header<span class="token operator">-</span>cell <span class="token punctuation">{</span>
        background<span class="token operator">-</span>color<span class="token operator">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        font<span class="token operator">-</span>weight<span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    `<span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>We've added some styles to make our table look more like a Star Wars terminal - with subtle zebra striping, hover effects, and proper spacing. The dark background with light text gives it that &quot;galactic database&quot; feel.</p>
<blockquote>
<p>The Ancient Order of Angular teaches that &quot;The user interface is the gateway to your application's soul.&quot; A well-styled table not only improves usability but creates an immersive experience that keeps users engaged with your data.</p>
</blockquote>
<p>Now let's look at the component class implementation:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CharacterListComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span><span class="token punctuation">,</span> AfterViewInit<span class="token punctuation">,</span> OnDestroy <span class="token punctuation">{</span>
  <span class="token comment">// Properties for our table and pagination</span>
  characters<span class="token operator">:</span> Character<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  displayedColumns<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">,</span> <span class="token string">'birth_year'</span><span class="token punctuation">,</span> <span class="token string">'height'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  pageSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  loading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  error <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
  totalCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Reference to the paginator in our template</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ViewChild</span></span><span class="token punctuation">(</span>MatPaginator<span class="token punctuation">)</span> paginator<span class="token operator">!</span><span class="token operator">:</span> MatPaginator<span class="token punctuation">;</span>

  <span class="token comment">// Services and DataSource</span>
  <span class="token keyword">private</span> starWarsService <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>StarWarsService<span class="token punctuation">)</span><span class="token punctuation">;</span>
  dataSource<span class="token operator">!</span><span class="token operator">:</span> GalacticDataSource<span class="token punctuation">;</span> <span class="token comment">// Using definite assignment assertion</span>
  <span class="token keyword">private</span> subscription <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subscription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token comment">// Create our DataSource instance</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GalacticDataSource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>starWarsService<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Subscribe to character data changes</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>characters <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>characters <span class="token operator">=</span> characters<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Subscribe to loading state</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">.</span>loading$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>isLoading <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> isLoading<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Subscribe to count</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">.</span>count$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>count <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>totalCount <span class="token operator">=</span> count<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Initial data load - start with page 1 and current page size</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadCharacters</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
<p>In <code>ngOnInit()</code>, we set up subscriptions to our DataSource's observables. This is where we connect the component's state to the DataSource's state. We're subscribing to:</p>
<ol>
<li><code>loading$</code> - to show/hide the loading spinner</li>
<li><code>count$</code> - to update the total number of characters for the paginator</li>
</ol>
<p>We also trigger the initial data load.</p>
<blockquote>
<p>The Council of Patterns warns: &quot;Never access ViewChild references in ngOnInit() - they are undefined until the view is initialized. Many a padawan has fallen into this trap, leading to the dreaded 'undefined' errors in the console.&quot;</p>
</blockquote>
<pre class="language-typescript"><code class="language-typescript">  <span class="token function">ngAfterViewInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token comment">// Connect paginator to our datasource after view init</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>paginator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Handle paginator events</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>paginator<span class="token punctuation">.</span>page<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>event <span class="token operator">=></span> <span class="token punctuation">{</span>
          <span class="token comment">// Convert from 0-based to 1-based pagination for the API</span>
          <span class="token keyword">const</span> apiPage <span class="token operator">=</span> event<span class="token punctuation">.</span>pageIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadCharacters</span><span class="token punctuation">(</span>apiPage<span class="token punctuation">,</span> event<span class="token punctuation">.</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">ngOnDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token comment">// Clean up subscriptions when the component is destroyed</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// The DataSource will handle its own cleanup in disconnect()</span>
  <span class="token punctuation">}</span></code></pre>
<p>The <code>ngAfterViewInit()</code> lifecycle hook runs after Angular has fully initialized the component's view. This is important because we need to access the <code>paginator</code> reference which isn't available until the view is initialized. Here we subscribe to the paginator's page events to reload data when the user changes pages.</p>
<blockquote>
<p>The Council of Patterns warns: &quot;Never access ViewChild references in ngOnInit() - they are undefined until the view is initialized. Many a padawan has fallen into this trap, leading to the dreaded 'undefined' errors in the console.&quot;</p>
</blockquote>
<pre class="language-typescript"><code class="language-typescript">  <span class="token function">ngOnDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token comment">// Clean up subscriptions when the component is destroyed</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// The DataSource will handle its own cleanup in disconnect()</span>
    <span class="token comment">// Clean up subscriptions</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscriptions<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
<p>The <code>ngOnDestroy()</code> method is our cleanup phase. By unsubscribing from all subscriptions when the component is destroyed, we prevent memory leaks. The Recursive Philosopher once noted, &quot;A component that does not clean up after itself is like a spaceship leaving debris in its wake - eventually, it will cause problems for future travelers.&quot;</p>
<pre class="language-typescript"><code class="language-typescript">  <span class="token function">loadCharacters</span><span class="token punctuation">(</span>page<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> pageSize<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageSize<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// Update the page size if it changed</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>pageSize <span class="token operator">=</span> pageSize<span class="token punctuation">;</span>
      <span class="token comment">// Let the DataSource handle loading the data</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">.</span><span class="token function">loadCharacters</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Failed to load characters: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error <span class="token keyword">instanceof</span> <span class="token class-name">Error</span> <span class="token operator">?</span> error<span class="token punctuation">.</span>message <span class="token operator">:</span> <span class="token string">'Unknown error'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. The Cosmic Compiler is displeased.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>Updating the DataSource for Pagination</h2>
<p>Now, let's enhance our GalacticDataSource to handle pagination properly. We'll build on the foundation we created in the previous post, adding new features specifically for pagination.</p>
<p>First, let's look at the imports and state management:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/features/star-wars/datasources/galactic-datasource.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> DataSource <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/cdk/collections'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> BehaviorSubject<span class="token punctuation">,</span> Observable<span class="token punctuation">,</span> Subscription <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> finalize <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Character <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../../models/character.model'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> StarWarsService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../../core/services/star-wars.service'</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * GalacticDataSource - A DataSource implementation for Star Wars characters
 *
 * As the Ancient Order of Angular foretold, "The DataSource shall liberate thy components
 * from the burden of data management, allowing them to focus on their true purpose."
 */</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">GalacticDataSource</span> <span class="token keyword">extends</span> <span class="token class-name">DataSource<span class="token operator">&lt;</span>Character<span class="token operator">></span></span> <span class="token punctuation">{</span>
  <span class="token comment">// BehaviorSubjects to manage internal state</span>
  <span class="token keyword">private</span> charactersSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject<span class="token operator">&lt;</span>Character<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> loadingSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> countSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> pageSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Track current page</span>
  <span class="token keyword">private</span> pageSizeSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Track page size</span>

  <span class="token comment">// Public observables that components can subscribe to</span>
  <span class="token keyword">public</span> loading$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">asObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> count$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>countSubject<span class="token punctuation">.</span><span class="token function">asObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> page$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageSubject<span class="token punctuation">.</span><span class="token function">asObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> pageSize$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageSizeSubject<span class="token punctuation">.</span><span class="token function">asObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Track active subscriptions for cleanup</span>
  <span class="token keyword">private</span> subscription <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subscription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>The key addition here is the <code>pageSubject</code> which tracks the current page. This allows components to react to page changes and enables features like &quot;current page&quot; indicators. We expose this as a public observable <code>page$</code> that components can subscribe to.</p>
<blockquote>
<p>The Recursive Philosopher once said, &quot;To truly understand state management, one must first understand that state is merely a snapshot of truth at a given moment in time.&quot; The Ancient Order of Angular nodded in agreement, then proceeded to create BehaviorSubject to make this philosophical concept concrete.</p>
</blockquote>
<p>Next, let's look at the constructor and required DataSource methods:</p>
<pre class="language-typescript"><code class="language-typescript">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> starWarsService<span class="token operator">:</span> StarWarsService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * Connect function that's called by the table to retrieve a stream of data
   * The Cosmic Compiler demands a proper implementation of this abstract method
   */</span>
  <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>Character<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>charactersSubject<span class="token punctuation">.</span><span class="token function">asObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * Disconnect function that's called when the table is destroyed
   * The Council of Patterns insists on proper cleanup to prevent memory leaks
   */</span>
  <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>charactersSubject<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>countSubject<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pageSubject<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pageSizeSubject<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
<p>The <code>connect()</code> method remains the same as before - it's the bridge between our DataSource and the table. The <code>disconnect()</code> method now includes completing our new <code>pageSubject</code> to prevent memory leaks.</p>
<p>Now for the most important part - loading data with pagination:</p>
<pre class="language-typescript"><code class="language-typescript">  <span class="token comment">/**
   * Load characters from the Star Wars API
   * @param page The page number to load (1-based)
   * @param pageSize The number of items per page
   */</span>
  <span class="token function">loadCharacters</span><span class="token punctuation">(</span>page<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> pageSize<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageSizeSubject<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pageSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pageSizeSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Log the request parameters for debugging</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Loading characters: page=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>page<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, pageSize=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pageSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Clear current data when loading new page</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>charactersSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>starWarsService
      <span class="token punctuation">.</span><span class="token function">getCharacters</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> subscription <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token function-variable function">next</span><span class="token operator">:</span> response <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token comment">// Update our subjects with the new data</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>charactersSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>
          response<span class="token punctuation">.</span>results
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=></span> item<span class="token punctuation">.</span>properties<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">:</span> char <span class="token keyword">is</span> Character <span class="token operator">=></span> char <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>countSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>total_records<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function-variable function">error</span><span class="token operator">:</span> error <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error loading characters:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>charactersSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>countSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Keep the current page and page size values to allow retry</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Add to our subscription for cleanup</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subscription<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
<p>There are several key changes in this method:</p>
<ol>
<li>We update the <code>pageSubject</code> with the current page number</li>
<li>We clear the existing data by setting an empty array (<code>[]</code>) before loading new data</li>
<li>We use the page parameter in our service call to fetch the correct page of data</li>
</ol>
<p>This is different from an &quot;infinite scroll&quot; approach where you would append new data to existing data. With pagination, we replace the entire dataset when changing pages.</p>
<p>Finally, let's add some utility methods to help with pagination:</p>
<pre class="language-typescript"><code class="language-typescript">  <span class="token comment">/**
   * Get the current data without subscribing
   */</span>
  <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Character<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>charactersSubject<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * Get the current page number without subscribing
   */</span>
  <span class="token function">getCurrentPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageSubject<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * Get the current page size without subscribing
   */</span>
  <span class="token function">getCurrentPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageSizeSubject<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * Clear all data in the DataSource
   */</span>
  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>charactersSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>countSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pageSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pageSizeSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Reset to default page size</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>These helper methods allow components to:</p>
<ol>
<li>Get the current data synchronously without subscribing</li>
<li>Check the current page number</li>
<li>Reset the DataSource to its initial state</li>
</ol>
<p>These are particularly useful for testing and for handling edge cases like resetting filters.</p>
<h2>Updating the StarWarsService for Page Size Support</h2>
<p>To fully support pagination with dynamic page sizes, we need to update our StarWarsService to accept and use the page size parameter when making API requests:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/core/services/star-wars.service.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable<span class="token punctuation">,</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> HttpClient<span class="token punctuation">,</span> HttpErrorResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/common/http'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Observable<span class="token punctuation">,</span> throwError <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> catchError<span class="token punctuation">,</span> retry<span class="token punctuation">,</span> map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> environment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../../environments/environment'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Character<span class="token punctuation">,</span> CharacterListItem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../models/character.model'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ApiResponse<span class="token punctuation">,</span> ApiDetailResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../models/api-response.model'</span><span class="token punctuation">;</span>

<span class="token comment">// Type aliases for our specific use cases</span>
<span class="token keyword">type</span> <span class="token class-name">CharacterResponse</span> <span class="token operator">=</span> ApiResponse<span class="token operator">&lt;</span>CharacterListItem<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">CharacterDetailResponse</span> <span class="token operator">=</span> ApiDetailResponse<span class="token operator">&lt;</span>Character<span class="token operator">></span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  providedIn<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token comment">// The Ancient Order approves of this modern injection approach</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">StarWarsService</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> apiUrl <span class="token operator">=</span> environment<span class="token punctuation">.</span>apiUrl<span class="token punctuation">;</span>
  <span class="token keyword">private</span> http <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>HttpClient<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Fetch all characters with optional pagination</span>
  <span class="token function">getCharacters</span><span class="token punctuation">(</span>page <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> pageSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>CharacterResponse<span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token comment">// The Cosmic Compiler demands proper URL formatting</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>apiUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">people?page=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>page<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;limit=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pageSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;expanded=true</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">API Request URL: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>CharacterResponse<span class="token operator">></span></span></span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
      <span class="token function">retry</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// The Cosmic Compiler suggests retrying failed requests</span>
      <span class="token function">catchError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleError<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>The key changes here are:</p>
<ol>
<li>Adding a <code>pageSize</code> parameter with a default value of 10</li>
<li>Using this parameter in the URL construction with the <code>limit</code> query parameter</li>
<li>Adding logging to help debug pagination issues</li>
</ol>
<h2>Understanding Pagination Differences</h2>
<p>One important detail to note is that SWAPI uses 1-based pagination (pages start at 1), while Angular Material's MatPaginator uses 0-based pagination (pages start at 0). This inconsistency is a classic example of the integration challenges developers face when connecting different systems.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// Converting from MatPaginator's 0-based index to SWAPI's 1-based index</span>
<span class="token keyword">const</span> apiPage <span class="token operator">=</span> event<span class="token punctuation">.</span>pageIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<p>The Recursive Philosopher once pondered, &quot;Is the first page page 0 or page 1? The answer depends not on mathematical truth but on which API you're consuming.&quot; The Ancient Order of Angular nodded sagely, having dealt with this exact inconsistency across countless projects. Legend has it that during the Great Framework Wars of 2015, entire development teams were torn apart over this very question.</p>
</blockquote>
<p>This conversion is crucial because if we don't account for it, we'll always be one page off in our requests. For example, when the user clicks on page 2 in the UI (which is index 1 in MatPaginator), we need to request page 3 from SWAPI.</p>
<h2>Handling Pagination Events</h2>
<p>The MatPaginator emits events when the user changes the page or page size. We subscribe to these events in the <code>ngAfterViewInit</code> lifecycle hook:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token function">ngAfterViewInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>paginator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>paginator<span class="token punctuation">.</span>page<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>event <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> apiPage <span class="token operator">=</span> event<span class="token punctuation">.</span>pageIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// Convert from 0-based to 1-based for API</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadCharacters</span><span class="token punctuation">(</span>apiPage<span class="token punctuation">,</span> event<span class="token punctuation">.</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>The <code>page</code> event contains valuable information:</p>
<ul>
<li><code>pageIndex</code>: The current page index (0-based)</li>
<li><code>pageSize</code>: The number of items per page</li>
<li><code>length</code>: The total number of items</li>
<li><code>previousPageIndex</code>: The previous page index</li>
</ul>
<p>Notice a few important details in our implementation:</p>
<ol>
<li>We check if <code>this.paginator</code> exists before trying to subscribe to it</li>
<li>We add the subscription to our composite <code>subscription</code> object for proper cleanup</li>
<li>We convert from the 0-based index used by Angular Material to the 1-based index used by our API</li>
<li>We pass both the page and page size to our <code>loadCharacters</code> method</li>
</ol>
<p>By subscribing to this event, we create a reactive system where any user interaction with the paginator automatically triggers a data reload with the appropriate parameters.</p>
<h2>Managing State During Pagination</h2>
<p>Unlike infinite scroll implementations where we append new data to existing data, with pagination we replace the entire dataset on each page change:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token function">loadCharacters</span><span class="token punctuation">(</span>page<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> pageSize<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageSizeSubject<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>pageSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>pageSizeSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>charactersSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>starWarsService
    <span class="token punctuation">.</span><span class="token function">getCharacters</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> subscription <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subscription<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>This replacement approach has several benefits:</p>
<ol>
<li><strong>Memory efficiency</strong>: We only keep the current page in memory, which is especially important when dealing with potentially large datasets</li>
<li><strong>Simpler state management</strong>: No need to track which items belong to which page or maintain complex caching logic</li>
<li><strong>Consistent with user expectations</strong>: Users expect to see only the current page's data when using a paginated interface</li>
<li><strong>Cleaner UI transitions</strong>: By clearing the data before loading new data, we avoid showing stale data during page transitions</li>
<li><strong>Better error handling</strong>: If an error occurs during loading, we don't have a mix of old and new data</li>
</ol>
<blockquote>
<p>The Cosmic Compiler once witnessed a developer trying to implement pagination by keeping all pages in memory and just showing/hiding rows. It promptly crashed the developer's IDE and left a single error message: &quot;The path to efficient pagination is not through hiding, but through loading only what is needed.&quot;</p>
</blockquote>
<h2>Accessibility Considerations</h2>
<p>Our implementation includes several accessibility features:</p>
<ol>
<li>The paginator has an <code>aria-label</code> that describes its purpose</li>
<li>We've added <code>data-testid</code> attributes to key elements for better testing and automation</li>
<li>The loading spinner provides visual feedback during page transitions with different states:
<ul>
<li>Full-screen spinner when no data is available</li>
<li>Smaller spinner at the bottom when changing pages with existing data</li>
</ul>
</li>
<li>Error messages are clearly displayed when issues occur with appropriate styling</li>
<li>Proper color contrast in our UI elements using our branding colors</li>
</ol>
<p>These considerations ensure that our galactic database is usable by all beings across the universe, regardless of their abilities or the assistive technologies they might be using. The Ancient Order of Angular has always emphasized that accessibility is not an afterthought but a fundamental aspect of good application design.</p>
<h2>Testing Our Paginated Table</h2>
<p>Let's run our application and see our new table with pagination in action:</p>
<pre class="language-bash"><code class="language-bash">ng serve</code></pre>
<p>Navigate to <code>http://localhost:4200</code> and you should see:</p>
<ol>
<li>A table displaying Star Wars characters with multiple columns</li>
<li>A paginator at the bottom showing the total number of records</li>
<li>The ability to navigate between pages</li>
<li>Options to change the page size</li>
</ol>
<p>Try clicking through different pages and changing the page size. Notice how the DataSource handles these interactions smoothly, updating the display and maintaining the correct state.</p>
<h3>Automated Testing</h3>
<p>We've added <code>data-testid</code> attributes to key elements to make our component easier to test. Here's a simple test that verifies our pagination functionality:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'CharacterListComponent'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> component<span class="token operator">:</span> CharacterListComponent<span class="token punctuation">;</span>
  <span class="token keyword">let</span> fixture<span class="token operator">:</span> ComponentFixture<span class="token operator">&lt;</span>CharacterListComponent<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> mockStarWarsService<span class="token operator">:</span> jasmine<span class="token punctuation">.</span>SpyObj<span class="token operator">&lt;</span>StarWarsService<span class="token operator">></span><span class="token punctuation">;</span>

  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    mockStarWarsService <span class="token operator">=</span> jasmine<span class="token punctuation">.</span><span class="token function">createSpyObj</span><span class="token punctuation">(</span><span class="token string">'StarWarsService'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'getCharacters'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">await</span> TestBed<span class="token punctuation">.</span><span class="token function">configureTestingModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      imports<span class="token operator">:</span> <span class="token punctuation">[</span>CharacterListComponent<span class="token punctuation">,</span> MatPaginatorModule<span class="token punctuation">,</span> MatTableModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
      providers<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span> provide<span class="token operator">:</span> StarWarsService<span class="token punctuation">,</span> useValue<span class="token operator">:</span> mockStarWarsService <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compileComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    mockStarWarsService<span class="token punctuation">.</span>getCharacters<span class="token punctuation">.</span>and<span class="token punctuation">.</span><span class="token function">returnValue</span><span class="token punctuation">(</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      results<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> uid<span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span> properties<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'Luke Skywalker'</span><span class="token punctuation">,</span> gender<span class="token operator">:</span> <span class="token string">'male'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      total_records<span class="token operator">:</span> <span class="token number">82</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    fixture <span class="token operator">=</span> TestBed<span class="token punctuation">.</span><span class="token function">createComponent</span><span class="token punctuation">(</span>CharacterListComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    component <span class="token operator">=</span> fixture<span class="token punctuation">.</span>componentInstance<span class="token punctuation">;</span>
    fixture<span class="token punctuation">.</span><span class="token function">detectChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should load characters and update pagination'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>mockStarWarsService<span class="token punctuation">.</span>getCharacters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledWith</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span>totalCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">82</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Simulate page change</span>
    <span class="token keyword">const</span> paginator <span class="token operator">=</span> fixture<span class="token punctuation">.</span>debugElement<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span>MatPaginator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> paginatorComponent <span class="token operator">=</span> paginator<span class="token punctuation">.</span>componentInstance<span class="token punctuation">;</span>
    paginatorComponent<span class="token punctuation">.</span>pageIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    paginatorComponent<span class="token punctuation">.</span>page<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> pageIndex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> pageSize<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> length<span class="token operator">:</span> <span class="token number">82</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>mockStarWarsService<span class="token punctuation">.</span>getCharacters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledWith</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>This test verifies that:</p>
<ol>
<li>The component loads characters on initialization</li>
<li>The pagination information is correctly updated</li>
<li>Page changes trigger new API calls with the correct parameters</li>
</ol>
<h2>Cosmic Compiler Summary</h2>
<ul>
<li>We've <strong>transitioned from cards to a MatTable</strong> for a more structured data display</li>
<li>We've <strong>added MatPaginator</strong> to enable navigation through large datasets</li>
<li>We've <strong>updated our DataSource</strong> to handle pagination properly with dynamic page sizes</li>
<li>We've <strong>enhanced our StarWarsService</strong> to accept page and limit parameters</li>
<li>We've <strong>implemented reactive state tracking</strong> with multiple BehaviorSubjects for characters, loading state, count, page, and page size</li>
<li>We've <strong>handled the conversion</strong> between 0-based UI pagination and 1-based API pagination</li>
<li>We've <strong>managed loading states</strong> to provide feedback during page transitions with different spinner placements</li>
<li>We've <strong>added proper error handling</strong> to gracefully handle API failures</li>
<li>We've <strong>implemented proper subscription management</strong> to prevent memory leaks</li>
<li>We've <strong>added data-testid attributes</strong> to improve testability</li>
</ul>
<blockquote>
<p>The Council of Patterns once decreed: &quot;A table without pagination is merely a list with delusions of grandeur.&quot; The Cosmic Compiler, ever the enforcer of good practices, has been known to mysteriously increase build times for applications that ignore this wisdom.</p>
</blockquote>
<p><em>In our next transmission, we'll enhance our table further by adding sorting capabilities. We'll implement sorting for our data, allowing users to organize the Galactic Archives by various attributes like name, height, or birth year. We'll explore both client-side and server-side sorting approaches and discuss the trade-offs. The Ancient Order of Angular teaches that a well-organized archive is the mark of a civilized application.</em></p>
<p><em>Remember that the full source code for this project is available in the Galactic Archives repository. The Council of Patterns recommends studying the implementation details, particularly how we've structured the DataSource class to handle both pagination and upcoming sorting functionality.</em></p>
<p><em>May your tables be paginated, your data sources be clean, and your users never reach the dreaded &quot;page 404&quot;.</em></p>
</content>
  </entry>  <entry>
    <title>Galactic Archives - API Mocking with MSW</title>
    <link href="https://aaronmaturen.com/musings/post-6-api-mocking-msw/"/>
    <updated>2025-06-06T00:00:00Z</updated>
    <id>https://aaronmaturen.com/musings/post-6-api-mocking-msw/</id>
    <content type="html"><h1>Angular DataSource with SWAPI: Building the Galactic Archives - API Mocking with MSW</h1>
<p><em>In the vast expanse of web development, there exists a paradox: to test your API integration thoroughly, you must first disconnect from the API entirely. This is not some mystical teaching from the Ancient Order of Angular, but a practical reality when your tests need to run reliably in CI/CD pipelines, offline environments, and parallel universes where the SWAPI servers might be temporarily offline. With MSW and Angular 18, we now have even more powerful tools at our disposal.</em></p>
<h2>The Dependency Dilemma</h2>
<p>When testing applications that rely on external APIs, we face several challenges:</p>
<ol>
<li>External APIs can be unreliable or rate-limited</li>
<li>Network requests slow down tests significantly</li>
<li>Testing edge cases and error states is difficult with real APIs</li>
<li>CI/CD environments may not have access to the external network</li>
</ol>
<blockquote>
<p>A padawan developer once asked the Council of Patterns about testing APIs: &quot;But if I mock the API, am I not just testing my mocks?&quot; The eldest council member smiled and replied, &quot;If you test the real API, you're testing someone else's code. If you mock nothing, your tests will be as unpredictable as a droid with a corrupted memory core. The path of wisdom lies between.&quot; The young developer nodded, though it would be years before they truly understood.</p>
</blockquote>
<p>Enter Mock Service Worker (MSW) - a library that intercepts actual HTTP requests at the network level and returns mocked responses. Unlike traditional mocking approaches that replace your HTTP client, MSW works by intercepting requests at a lower level, providing a more realistic testing experience.</p>
<h2>Setting Up MSW for Angular 18</h2>
<p>Let's start by installing MSW and its dependencies:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> msw@latest --save-dev
<span class="token function">npm</span> <span class="token function">install</span> jest-fixed-jsdom node-fetch@2 undici --save-dev
<span class="token function">npm</span> <span class="token function">install</span> @types/node-fetch@2 --save-dev</code></pre>
<p>Next, we need to create a mock service worker setup. We'll centralize our mocks in a single location:</p>
<pre><code>src/
â””â”€â”€ mocks/
    â”œâ”€â”€ handlers.ts
    â”œâ”€â”€ browser.ts
    â””â”€â”€ server.ts
</code></pre>
<h3>Creating Mock Handlers with MSW</h3>
<p>The handlers define how MSW should respond to specific API requests. In MSW v2, we use the <code>http</code> namespace instead of <code>rest</code> and the new <code>HttpResponse</code> API for creating responses:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/mocks/handlers.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> http<span class="token punctuation">,</span> HttpResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"msw"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> environment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../environments/environment"</span><span class="token punctuation">;</span>

<span class="token comment">// Sample character data matching the swapi.tech API format with expanded=true</span>
<span class="token keyword">const</span> characters <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    uid<span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">"Luke Skywalker"</span><span class="token punctuation">,</span>
    url<span class="token operator">:</span> <span class="token string">"https://www.swapi.tech/api/people/1"</span><span class="token punctuation">,</span>
    properties<span class="token operator">:</span> <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">"Luke Skywalker"</span><span class="token punctuation">,</span>
      height<span class="token operator">:</span> <span class="token string">"172"</span><span class="token punctuation">,</span>
      mass<span class="token operator">:</span> <span class="token string">"77"</span><span class="token punctuation">,</span>
      hair_color<span class="token operator">:</span> <span class="token string">"blond"</span><span class="token punctuation">,</span>
      skin_color<span class="token operator">:</span> <span class="token string">"fair"</span><span class="token punctuation">,</span>
      eye_color<span class="token operator">:</span> <span class="token string">"blue"</span><span class="token punctuation">,</span>
      birth_year<span class="token operator">:</span> <span class="token string">"19BBY"</span><span class="token punctuation">,</span>
      gender<span class="token operator">:</span> <span class="token string">"male"</span><span class="token punctuation">,</span>
      homeworld<span class="token operator">:</span> <span class="token string">"https://www.swapi.tech/api/planets/1"</span><span class="token punctuation">,</span>
      created<span class="token operator">:</span> <span class="token string">"2020-09-17T06:49:05.235Z"</span><span class="token punctuation">,</span>
      edited<span class="token operator">:</span> <span class="token string">"2020-09-17T06:49:05.235Z"</span><span class="token punctuation">,</span>
      url<span class="token operator">:</span> <span class="token string">"https://www.swapi.tech/api/people/1"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    description<span class="token operator">:</span> <span class="token string">"A person within the Star Wars universe"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    uid<span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">"C-3PO"</span><span class="token punctuation">,</span>
    url<span class="token operator">:</span> <span class="token string">"https://www.swapi.tech/api/people/2"</span><span class="token punctuation">,</span>
    properties<span class="token operator">:</span> <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">"C-3PO"</span><span class="token punctuation">,</span>
      height<span class="token operator">:</span> <span class="token string">"167"</span><span class="token punctuation">,</span>
      mass<span class="token operator">:</span> <span class="token string">"75"</span><span class="token punctuation">,</span>
      hair_color<span class="token operator">:</span> <span class="token string">"n/a"</span><span class="token punctuation">,</span>
      skin_color<span class="token operator">:</span> <span class="token string">"gold"</span><span class="token punctuation">,</span>
      eye_color<span class="token operator">:</span> <span class="token string">"yellow"</span><span class="token punctuation">,</span>
      birth_year<span class="token operator">:</span> <span class="token string">"112BBY"</span><span class="token punctuation">,</span>
      gender<span class="token operator">:</span> <span class="token string">"n/a"</span><span class="token punctuation">,</span>
      homeworld<span class="token operator">:</span> <span class="token string">"https://www.swapi.tech/api/planets/1"</span><span class="token punctuation">,</span>
      created<span class="token operator">:</span> <span class="token string">"2020-09-17T06:49:05.235Z"</span><span class="token punctuation">,</span>
      edited<span class="token operator">:</span> <span class="token string">"2020-09-17T06:49:05.235Z"</span><span class="token punctuation">,</span>
      url<span class="token operator">:</span> <span class="token string">"https://www.swapi.tech/api/people/2"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    description<span class="token operator">:</span> <span class="token string">"A person within the Star Wars universe"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> handlers <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">// Handle GET request for all characters with pagination</span>
  http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>environment<span class="token punctuation">.</span>apiUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">people</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> request <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> page <span class="token operator">=</span> url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"1"</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> limit <span class="token operator">=</span> url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"limit"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"10"</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> expanded <span class="token operator">=</span> url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"expanded"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"true"</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> name <span class="token operator">=</span> url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Handle search by name</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> filteredResults <span class="token operator">=</span> characters<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">=></span>
        char<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> HttpResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        message<span class="token operator">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span>
        total_records<span class="token operator">:</span> filteredResults<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
        total_pages<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        previous<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        next<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        results<span class="token operator">:</span> filteredResults<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Handle pagination</span>
    <span class="token keyword">const</span> pageNum <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> hasNextPage <span class="token operator">=</span> pageNum <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token comment">// Assuming 9 pages total</span>
    <span class="token keyword">const</span> hasPrevPage <span class="token operator">=</span> pageNum <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      message<span class="token operator">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span>
      total_records<span class="token operator">:</span> <span class="token number">82</span><span class="token punctuation">,</span>
      total_pages<span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
      previous<span class="token operator">:</span> hasPrevPage
        <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://www.swapi.tech/api/people?page=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pageNum <span class="token operator">-</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;limit=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>limit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
        <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      next<span class="token operator">:</span> hasNextPage
        <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://www.swapi.tech/api/people?page=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pageNum <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;limit=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>limit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
        <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      results<span class="token operator">:</span> characters<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment">// Handle GET request for a specific character</span>
  http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>environment<span class="token punctuation">.</span>apiUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">people/:id</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> params<span class="token punctuation">;</span>
    <span class="token keyword">const</span> character <span class="token operator">=</span> characters<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=></span> c<span class="token punctuation">.</span>uid <span class="token operator">===</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>character<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// The Ancient Order of Angular teaches us to handle errors gracefully</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HttpResponse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token number">404</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      message<span class="token operator">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span>
      result<span class="token operator">:</span> character<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment">// Handle error scenario for testing</span>
  http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>environment<span class="token punctuation">.</span>apiUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">error-test</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HttpResponse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<h3>Setting Up MSW v2 for Browser</h3>
<p>For our browser environment (both development and E2E tests), we need to set up MSW to work with the browser. Note the import path change to <code>msw/browser</code> in MSW v2:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/mocks/browser.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setupWorker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"msw/browser"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> handlers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./handlers"</span><span class="token punctuation">;</span>

<span class="token comment">// This configures a Service Worker with the given request handlers</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token function">setupWorker</span><span class="token punctuation">(</span><span class="token operator">...</span>handlers<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3>Setting Up MSW v2 for Node (Jest Tests)</h3>
<p>For Jest unit tests running in Node environment, we need a server setup.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/mocks/server.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setupServer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"msw/node"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> handlers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./handlers"</span><span class="token punctuation">;</span>

<span class="token comment">// This configures a request mocking server with the given request handlers</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token function">setupServer</span><span class="token punctuation">(</span><span class="token operator">...</span>handlers<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2>Configuring MSW for Jest Unit Tests</h2>
<p>To use MSW in our Jest tests, we need to update our Jest setup file and configuration. First, let's update our Jest config to use the fixed JSDOM environment which works better with MSW. The standard JSDOM environment has issues with MSW's request interception, particularly with fetch requests and certain headers. The jest-fixed-jsdom package provides a patched version that properly supports MSW's network interception capabilities:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// jest.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">preset</span><span class="token operator">:</span> <span class="token string">"jest-preset-angular"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">setupFilesAfterEnv</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;rootDir>/setup-jest.ts"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">testEnvironment</span><span class="token operator">:</span> <span class="token string">"jest-fixed-jsdom"</span><span class="token punctuation">,</span> <span class="token comment">// Use fixed JSDOM for better MSW v2 compatibility</span>
  <span class="token comment">// other config options...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>Next, we'll update our Jest setup file to initialize the MSW server:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// setup-jest.ts</span>
<span class="token keyword">import</span> <span class="token string">"jest-preset-angular/setup-jest"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> server <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./src/mocks/server"</span><span class="token punctuation">;</span> <span class="token comment">// Updated import path</span>

<span class="token comment">// Establish API mocking before all tests</span>
<span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Reset any request handlers that we may add during the tests,</span>
<span class="token comment">// so they don't affect other tests</span>
<span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> server<span class="token punctuation">.</span><span class="token function">resetHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Clean up after the tests are finished</span>
<span class="token function">afterAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2>Testing the Star Wars Service with MSW v2 and Angular 18</h2>
<p>Now, let's write a test for our Star Wars service using MSW v2 and Angular 18's new provider syntax. Here's how our updated test looks:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/core/services/star-wars.service.spec.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> TestBed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/core/testing"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> provideHttpClient<span class="token punctuation">,</span> withFetch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/common/http"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> StarWarsService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./star-wars.service"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> firstValueFrom <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"rxjs"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> server <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../../mocks/server"</span><span class="token punctuation">;</span> <span class="token comment">// Updated import path</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> http<span class="token punctuation">,</span> HttpResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"msw"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> environment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../../environments/environment"</span><span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"StarWarsService"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> service<span class="token operator">:</span> StarWarsService<span class="token punctuation">;</span>

  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    TestBed<span class="token punctuation">.</span><span class="token function">configureTestingModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      providers<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">provideHttpClient</span><span class="token punctuation">(</span><span class="token function">withFetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Angular 18 functional providers</span>
        StarWarsService<span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    service <span class="token operator">=</span> TestBed<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>StarWarsService<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"should be created"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"should fetch characters"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">firstValueFrom</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>results<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">"Luke Skywalker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"should fetch a specific character"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">firstValueFrom</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getCharacter</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">expect</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>result<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">"Luke Skywalker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>result<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">"172"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"should handle errors"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// Override the handler just for this test</span>
    server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
      http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>environment<span class="token punctuation">.</span>apiUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">people</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HttpResponse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">await</span> <span class="token function">firstValueFrom</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// Should not reach here</span>
      <span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"Expected error but got success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">expect</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2>Configuring MSW v2 for Playwright E2E Tests</h2>
<p>For Playwright E2E tests, we need a special setup to initialize MSW v2 in both the Node environment and inject it into the browser context. Let's create a dedicated setup file for Playwright with the updated MSW v2 imports:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// e2e/setup/msw.setup.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> test <span class="token keyword">as</span> base <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@playwright/test"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setupServer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"msw/node"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> handlers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../src/mocks/handlers"</span><span class="token punctuation">;</span> <span class="token comment">// Updated import path</span>

<span class="token comment">// Create MSW server instance</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token function">setupServer</span><span class="token punctuation">(</span><span class="token operator">...</span>handlers<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Define a custom test fixture that sets up MSW</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> test <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// Start MSW server before tests</span>
  <span class="token function-variable function">page</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">,</span> use<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// Start the MSW server before all tests</span>
    server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">{</span> onUnhandledRequest<span class="token operator">:</span> <span class="token string">"bypass"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Bypass unhandled requests in MSW v2</span>

    <span class="token comment">// Add MSW enabled flag to browser context</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">addInitScript</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"useMSW"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Use the page with MSW enabled</span>
    <span class="token keyword">await</span> <span class="token function">use</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Clean up after tests</span>
    server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Export expect for convenience</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@playwright/test"</span><span class="token punctuation">;</span></code></pre>
<p>Next, we need to update our Playwright configuration to use this setup file and ensure we're using our MSW-enabled environment:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// playwright.config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig<span class="token punctuation">,</span> devices <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@playwright/test"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">"path"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  testDir<span class="token operator">:</span> <span class="token string">"./e2e"</span><span class="token punctuation">,</span>
  fullyParallel<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  forbidOnly<span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CI</span><span class="token punctuation">,</span>
  retries<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CI</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  workers<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CI</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  reporter<span class="token operator">:</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token comment">// Use list reporter instead of HTML for cleaner output</span>
  use<span class="token operator">:</span> <span class="token punctuation">{</span>
    baseURL<span class="token operator">:</span> <span class="token string">"http://localhost:4200"</span><span class="token punctuation">,</span>
    trace<span class="token operator">:</span> <span class="token string">"on-first-retry"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  projects<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">"chromium"</span><span class="token punctuation">,</span>
      use<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span>devices<span class="token punctuation">[</span><span class="token string">"Desktop Chrome"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">"firefox"</span><span class="token punctuation">,</span>
      use<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span>devices<span class="token punctuation">[</span><span class="token string">"Desktop Firefox"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">"webkit"</span><span class="token punctuation">,</span>
      use<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span>devices<span class="token punctuation">[</span><span class="token string">"Desktop Safari"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  webServer<span class="token operator">:</span> <span class="token punctuation">{</span>
    command<span class="token operator">:</span> <span class="token string">"npm run start:mocks"</span><span class="token punctuation">,</span> <span class="token comment">// Use our mocks-enabled start script</span>
    url<span class="token operator">:</span> <span class="token string">"http://localhost:4200"</span><span class="token punctuation">,</span>
    reuseExistingServer<span class="token operator">:</span> <span class="token operator">!</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CI</span><span class="token punctuation">,</span>
    timeout<span class="token operator">:</span> <span class="token number">120000</span><span class="token punctuation">,</span> <span class="token comment">// Increased timeout for slower machines</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>We also need to make sure our environment configuration supports MSW toggling and update our main.ts file to conditionally load the MSW worker:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/environments/environment.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> environment <span class="token operator">=</span> <span class="token punctuation">{</span>
  production<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  apiUrl<span class="token operator">:</span> <span class="token string">"https://www.swapi.tech/api/"</span><span class="token punctuation">,</span>
  useMSW<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// src/environments/environment.prod.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> environment <span class="token operator">=</span> <span class="token punctuation">{</span>
  production<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  apiUrl<span class="token operator">:</span> <span class="token string">"https://www.swapi.tech/api/"</span><span class="token punctuation">,</span>
  useMSW<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> bootstrapApplication <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/platform-browser"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> appConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./app/app.config"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./app/app.component"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> environment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./environments/environment"</span><span class="token punctuation">;</span>

<span class="token comment">// Conditionally initialize MSW only in non-production or when explicitly enabled</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>environment<span class="token punctuation">.</span>useMSW<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Dynamic import to avoid loading MSW code in production</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./mocks/browser"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> worker <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    worker<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">{</span> onUnhandledRequest<span class="token operator">:</span> <span class="token string">"bypass"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">bootstrapApplication</span><span class="token punctuation">(</span>AppComponent<span class="token punctuation">,</span> appConfig<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2>Writing E2E Tests with MSW</h2>
<p>Now we can write E2E tests that use our mocked API. Here's our character list test using our custom MSW setup with stable data-testid selectors:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// e2e/character-list.spec.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./setup/msw.setup"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> http<span class="token punctuation">,</span> HttpResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"msw"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> server <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./setup/msw.setup"</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"should display character list"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">"/characters"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Wait for the characters to load using data-testid</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForSelector</span><span class="token punctuation">(</span><span class="token string">'[data-testid="character-list-heading"]'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    timeout<span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Character list heading found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Check if Luke Skywalker is displayed</span>
  <span class="token keyword">const</span> lukeCard <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">'mat-card-title:has-text("Luke Skywalker")'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>lukeCard<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Luke Skywalker card found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Check if C-3PO is displayed</span>
  <span class="token keyword">const</span> c3poCard <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">'mat-card-title:has-text("C-3PO")'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>c3poCard<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"C-3PO card found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"should display error message when API fails"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Override the handler just for this test</span>
  server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
    http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"https://www.swapi.tech/api/people"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HttpResponse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">"/characters"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Check if error message is displayed</span>
  <span class="token keyword">const</span> errorMessage <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">'[data-testid="error-message"]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeVisible</span><span class="token punctuation">(</span><span class="token punctuation">{</span> timeout<span class="token operator">:</span> <span class="token number">5000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContainText</span><span class="token punctuation">(</span><span class="token string">"Error loading characters"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2>Directory Structure Organization</h2>
<p>We've organized our mock files in a single <code>src/mocks</code> directory for better maintainability:</p>
<pre><code>src/
â””â”€â”€ mocks/         # All mock files in one place
    â”œâ”€â”€ handlers.ts
    â”œâ”€â”€ browser.ts
    â””â”€â”€ server.ts
</code></pre>
<p>This clean structure makes imports consistent and avoids module resolution issues. All tests and the main application reference these files from the same location.</p>
<h2>Cosmic Compiler Summary</h2>
<p>The Cosmic Compiler has guided us through the implementation of MSW for API mocking in our Angular 18 application. Let's review what we've accomplished:</p>
<ul>
<li>We've <strong>installed MSW and its dependencies</strong> including jest-fixed-jsdom for better compatibility</li>
<li>We've <strong>organized our mock files</strong> in a single src/mocks directory for better organization</li>
<li>We've <strong>created handlers using the http namespace</strong> for intercepting network requests</li>
<li>We've <strong>implemented HttpResponse.json()</strong> for creating mock responses</li>
<li>We've <strong>configured Jest</strong> to use jest-fixed-jsdom for better MSW compatibility</li>
<li>We've <strong>modernized our Angular tests</strong> to use Angular 18's functional providers like provideHttpClient(withFetch())</li>
<li>We've <strong>improved our E2E tests</strong> with stable data-testid selectors and better debugging</li>
<li>We've <strong>added conditional MSW initialization</strong> in our main.ts to avoid loading MSW in production</li>
<li>We've <strong>configured our environment</strong> to toggle MSW usage based on environment settings</li>
</ul>
<blockquote>
<p>The Recursive Philosopher once said: &quot;The best API is one you never have to call, and the best mock is one you never realize is a mock.&quot; The Cosmic Compiler nodded in approval, recognizing the paradoxical wisdom in testing what isn't there to ensure what is there works correctly.</p>
</blockquote>
<p><em>In our next transmission, we'll finally unveil the mystical DataSource pattern - the very foundation of our Galactic Archives. As the Ancient Order of Angular prophesied during that caffeine-fueled sprint review, &quot;The DataSource shall bring balance to your component logic, separating the concerns of data retrieval from presentation.&quot;</em></p>
<p><em>May your mocks be realistic, your tests deterministic, and your Angular 18 applications blazingly fast.</em></p>
</content>
  </entry>  <entry>
    <title>Galactic Archives - Star Wars API Service</title>
    <link href="https://aaronmaturen.com/musings/post-5-star-wars-api-service/"/>
    <updated>2025-06-05T00:00:00Z</updated>
    <id>https://aaronmaturen.com/musings/post-5-star-wars-api-service/</id>
    <content type="html"><h1>Angular DataSource with SWAPI: Building the Galactic Archives - Star Wars API Service</h1>
<p><em>In a dimension where APIs communicate through quantum entanglement rather than HTTP requests, developers would still need to handle error states. Unfortunately, in our reality, we're stuck with REST endpoints, JSON parsing, and the occasional 503 Service Unavailable that arrives precisely when you're demoing to stakeholders.</em></p>
<h2>Establishing Contact with the SWAPI Galaxy</h2>
<p>Before we can build our magnificent DataSource, we need a reliable communication channel to the Star Wars API (SWAPI). This will serve as the foundation for our Galactic Archives, providing the raw data we'll eventually transform and display.</p>
<p>The Ancient Order of Angular has long taught that proper service implementation follows three sacred principles: strong typing, robust error handling, and environment-specific configuration. Today, we'll honor these traditions.</p>
<h2>Creating Interfaces for Galactic Data</h2>
<p>First, let's define the structure of our data using TypeScript interfaces. The Cosmic Compiler particularly appreciates well-defined types. We'll be using the swapi.tech API which has a slightly different structure than the original swapi.dev API:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/models/character.model.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ApiResponse<span class="token punctuation">,</span> ApiDetailResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./api-response.model"</span><span class="token punctuation">;</span>

<span class="token comment">// Character list item in results array</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">CharacterListItem</span> <span class="token punctuation">{</span>
  uid<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  url<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token comment">// For expanded=true responses</span>
  properties<span class="token operator">?</span><span class="token operator">:</span> Character<span class="token punctuation">;</span>
  description<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  _id<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  __v<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Full character details</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Character</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  height<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  mass<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  hair_color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  skin_color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  eye_color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  birth_year<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  gender<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  homeworld<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  created<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  edited<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// src/app/models/api-response.model.ts</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ApiResponse</span> <span class="token punctuation">{</span>
  message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  total_records<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  total_pages<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  previous<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  next<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  results<span class="token operator">:</span> CharacterListItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ApiDetailResponse</span> <span class="token punctuation">{</span>
  message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  result<span class="token operator">:</span> <span class="token punctuation">{</span>
    properties<span class="token operator">:</span> Character<span class="token punctuation">;</span>
    description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    _id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    uid<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    __v<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Export type aliases for our specific use cases</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">CharacterResponse</span> <span class="token operator">=</span> ApiResponse<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">CharacterDetailResponse</span> <span class="token operator">=</span> ApiDetailResponse<span class="token punctuation">;</span></code></pre>
<p>Notice how we've created separate interfaces for the list response and detail response. The swapi.tech API has a different structure than the original SWAPI, and we need to account for that. We've also added support for the <code>expanded=true</code> parameter, which allows us to get full character details in a single request.</p>
<h2>Setting Up Environment Configuration</h2>
<p>The Council of Patterns has decreed that API URLs should never be hardcoded. Let's follow their wisdom by setting up environment-specific configuration:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/environments/environment.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> environment <span class="token operator">=</span> <span class="token punctuation">{</span>
  production<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  apiUrl<span class="token operator">:</span> <span class="token string">"https://www.swapi.tech/api/"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// src/environments/environment.prod.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> environment <span class="token operator">=</span> <span class="token punctuation">{</span>
  production<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  apiUrl<span class="token operator">:</span> <span class="token string">"https://www.swapi.tech/api/"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>We're using the swapi.tech API, which is a modern implementation of the Star Wars API with some additional features like the <code>expanded=true</code> parameter. Notice that we include the trailing slash in the URL to ensure proper path construction when making API requests. This small detail prevents the Cosmic Compiler from unleashing its wrath upon us for URL formatting errors.</p>
<h2>Implementing the Star Wars Service</h2>
<h3>Modern Dependency Injection with inject()</h3>
<p>In our implementation, we're using Angular's modern <code>inject()</code> function instead of the traditional constructor injection. This approach was introduced in Angular 14 and is now the recommended way to handle dependency injection in Angular applications.</p>
<p>The <code>inject()</code> function offers several advantages:</p>
<ul>
<li>Cleaner code with less boilerplate</li>
<li>Better tree-shaking potential</li>
<li>More flexibility in how dependencies are injected</li>
<li>Works better with standalone components and services</li>
</ul>
<p>The Ancient Order of Angular has decreed that <code>inject()</code> shall be the preferred way forward, and the Cosmic Compiler has been observed to emit fewer warning photons when this pattern is used.</p>
<p>Now, let's create our service to interact with the swapi.tech API:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/core/services/star-wars.service.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable<span class="token punctuation">,</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/core"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> HttpClient<span class="token punctuation">,</span> HttpErrorResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/common/http"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Observable<span class="token punctuation">,</span> throwError <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"rxjs"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> catchError<span class="token punctuation">,</span> retry<span class="token punctuation">,</span> map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"rxjs/operators"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> environment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../../environments/environment"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Character<span class="token punctuation">,</span> CharacterListItem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../models/character.model"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  ApiResponse<span class="token punctuation">,</span>
  ApiDetailResponse<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../models/api-response.model"</span><span class="token punctuation">;</span>

<span class="token comment">// Type aliases for our specific use cases</span>
<span class="token keyword">type</span> <span class="token class-name">CharacterResponse</span> <span class="token operator">=</span> ApiResponse<span class="token operator">&lt;</span>CharacterListItem<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">CharacterDetailResponse</span> <span class="token operator">=</span> ApiDetailResponse<span class="token operator">&lt;</span>Character<span class="token operator">></span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  providedIn<span class="token operator">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">StarWarsService</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> apiUrl <span class="token operator">=</span> environment<span class="token punctuation">.</span>apiUrl<span class="token punctuation">;</span>
  <span class="token keyword">private</span> http <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>HttpClient<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Using inject() instead of constructor injection</span>

  <span class="token comment">// Fetch all characters with optional pagination</span>
  <span class="token function">getCharacters</span><span class="token punctuation">(</span>page <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>CharacterResponse<span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token comment">// The Cosmic Compiler demands proper URL formatting</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http
      <span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>CharacterResponse<span class="token operator">></span></span></span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>apiUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">people?page=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>page<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;limit=10&amp;expanded=true</span><span class="token template-punctuation string">`</span></span>
      <span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
        <span class="token function">retry</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// The Cosmic Compiler suggests retrying failed requests</span>
        <span class="token function">catchError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleError<span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Fetch a specific character by ID</span>
  <span class="token function">getCharacter</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>Character<span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http
      <span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>CharacterDetailResponse<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>apiUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">people/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
        <span class="token function">retry</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token operator">:</span> CharacterDetailResponse<span class="token punctuation">)</span> <span class="token operator">=></span> response<span class="token punctuation">.</span>result<span class="token punctuation">.</span>properties<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">catchError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleError<span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Search for characters by name</span>
  <span class="token function">searchCharacters</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>CharacterResponse<span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http
      <span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>CharacterResponse<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>apiUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">people?name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">catchError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleError<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Error handling method</span>
  <span class="token keyword">private</span> <span class="token function">handleError</span><span class="token punctuation">(</span>error<span class="token operator">:</span> HttpErrorResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> errorMessage <span class="token operator">=</span> <span class="token string">"Unknown error!"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>error <span class="token keyword">instanceof</span> <span class="token class-name">ErrorEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Client-side errors</span>
      errorMessage <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>error<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// Server-side errors</span>
      errorMessage <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error Code: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\nMessage: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">throwError</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>Our service provides three main methods:</p>
<ol>
<li><code>getCharacters()</code> - Fetches a paginated list of characters with expanded details</li>
<li><code>getCharacter()</code> - Retrieves details for a specific character</li>
<li><code>searchCharacters()</code> - Searches for characters by name</li>
</ol>
<p>Notice the key improvements in our implementation:</p>
<ul>
<li>We use the <code>expanded=true</code> parameter to get full character details in a single request</li>
<li>We include the <code>limit=10</code> parameter to ensure consistent pagination</li>
<li>URL formatting is carefully handled to avoid double slashes (the apiUrl already includes a trailing slash)</li>
</ul>
<p>The Ancient Order of Angular would be pleased with our implementation of reactive patterns and attention to API-specific details.</p>
<h2>Creating a Simple Display Component</h2>
<p>To test our service, let's create a simple component to display character data. We'll place this in a feature module for Star Wars components:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/features/star-wars/components/character-list/character-list.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> OnInit<span class="token punctuation">,</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/core"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CommonModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/common"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatCardModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/card"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatProgressSpinnerModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/progress-spinner"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatButtonModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/button"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> StarWarsService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../../../core/services/star-wars.service"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Character <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../../../models/character.model"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> catchError<span class="token punctuation">,</span> finalize<span class="token punctuation">,</span> map<span class="token punctuation">,</span> <span class="token keyword">of</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"rxjs"</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">"app-character-list"</span><span class="token punctuation">,</span>
  standalone<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
    CommonModule<span class="token punctuation">,</span>
    MatCardModule<span class="token punctuation">,</span>
    MatProgressSpinnerModule<span class="token punctuation">,</span>
    MatButtonModule<span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;div class="tw-container tw-mx-auto tw-p-4">
      &lt;h1 class="tw-text-2xl tw-font-bold tw-mb-4">Star Wars Characters&lt;/h1>

      &lt;div *ngIf="loading" class="tw-flex tw-justify-center tw-my-8">
        &lt;mat-spinner diameter="50">&lt;/mat-spinner>
      &lt;/div>

      &lt;div
        *ngIf="error"
        class="tw-bg-red-100 tw-border-l-4 tw-border-red-500 tw-text-red-700 tw-p-4 tw-mb-4"
      >
        {{ error }}
      &lt;/div>

      &lt;div
        class="tw-grid tw-grid-cols-1 md:tw-grid-cols-2 lg:tw-grid-cols-3 tw-gap-4"
      >
        &lt;mat-card
          *ngFor="let character of characters"
          class="tw-mb-4 tw-transition-all tw-duration-300 tw-hover:tw-shadow-xl"
        >
          &lt;mat-card-header>
            &lt;mat-card-title>{{ character.name }}&lt;/mat-card-title>
            &lt;mat-card-subtitle
              >Birth Year: {{ character.birth_year }}&lt;/mat-card-subtitle
            >
          &lt;/mat-card-header>

          &lt;mat-card-content class="tw-py-2">
            &lt;div class="tw-grid tw-grid-cols-2 tw-gap-2">
              &lt;div class="tw-text-sm">
                &lt;strong>Height:&lt;/strong> {{ character.height }}cm
              &lt;/div>
              &lt;div class="tw-text-sm">
                &lt;strong>Mass:&lt;/strong> {{ character.mass }}kg
              &lt;/div>
              &lt;div class="tw-text-sm">
                &lt;strong>Hair:&lt;/strong> {{ character.hair_color }}
              &lt;/div>
              &lt;div class="tw-text-sm">
                &lt;strong>Eyes:&lt;/strong> {{ character.eye_color }}
              &lt;/div>
            &lt;/div>
          &lt;/mat-card-content>

          &lt;mat-card-actions class="tw-flex tw-justify-end">
            &lt;button mat-button color="primary">VIEW DETAILS&lt;/button>
          &lt;/mat-card-actions>
        &lt;/mat-card>
      &lt;/div>

      &lt;div class="tw-flex tw-justify-center tw-mt-4">
        &lt;button
          mat-button
          color="primary"
          [disabled]="loading || !hasNextPage"
          (click)="loadNextPage()"
        >
          LOAD MORE
        &lt;/button>
      &lt;/div>
    &lt;/div>
  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
  styles<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CharacterListComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span>
  characters<span class="token operator">:</span> Character<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  currentPage <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  hasNextPage <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  loading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  error <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

  <span class="token keyword">private</span> starWarsService <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>StarWarsService<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">loadCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>starWarsService
      <span class="token punctuation">.</span><span class="token function">getCharacters</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentPage<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
        <span class="token function">catchError</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Failed to load characters: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. The Cosmic Compiler is displeased.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token keyword">of</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            message<span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>
            results<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            total_records<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            total_pages<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            next<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
            previous<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
          <span class="token comment">// Extract next page number from the next URL if it exists</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> nextUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> nextPage <span class="token operator">=</span> nextUrl<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextPage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span>currentPage <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>nextPage<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// Store the current page (next page - 1)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>

          <span class="token keyword">this</span><span class="token punctuation">.</span>hasNextPage <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>response<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

          <span class="token comment">// With expanded=true, each result directly contains properties</span>
          <span class="token keyword">return</span> response<span class="token punctuation">.</span>results
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>properties<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">:</span> char <span class="token keyword">is</span> Character <span class="token operator">=></span> char <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>characters<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>characters<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>characters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>characters<span class="token punctuation">,</span> <span class="token operator">...</span>characters<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">loadNextPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hasNextPage <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>loading<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>currentPage<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>Registering Our Feature Module</h2>
<p>To make our component accessible, we need to update our app routes:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/app.routes.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Routes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/router"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> routes<span class="token operator">:</span> Routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> redirectTo<span class="token operator">:</span> <span class="token string">"characters"</span><span class="token punctuation">,</span> pathMatch<span class="token operator">:</span> <span class="token string">"full"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token string">"characters"</span><span class="token punctuation">,</span>
    <span class="token function-variable function">loadComponent</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
      <span class="token keyword">import</span><span class="token punctuation">(</span>
        <span class="token string">"./features/star-wars/components/character-list/character-list.component"</span>
      <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">=></span> m<span class="token punctuation">.</span>CharacterListComponent<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<h2>Setting Up the HTTP Client</h2>
<p>Don't forget to provide the HttpClient in your app configuration:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/app.config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ApplicationConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/core"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> provideRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/router"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> provideAnimations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/platform-browser/animations"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  provideHttpClient<span class="token punctuation">,</span>
  withInterceptorsFromDi<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/common/http"</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> routes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./app.routes"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> appConfig<span class="token operator">:</span> ApplicationConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">provideRouter</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">provideAnimations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">provideHttpClient</span><span class="token punctuation">(</span><span class="token function">withInterceptorsFromDi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// The Cosmic Compiler demands HTTP capabilities</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h2>Testing Our Implementation</h2>
<p>With everything in place, let's run our application and see the results:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Launch the application into hyperspace</span>
ng serve</code></pre>
<p>Navigate to <code>http://localhost:4200</code>, and you should see a list of Star Wars characters loaded from the API. The &quot;Load More&quot; button will fetch additional pages of data when clicked.</p>
<h2>Handling Pagination with swapi.tech API</h2>
<p>One important aspect of our implementation is proper pagination handling. The swapi.tech API returns pagination information in a specific format that requires careful handling:</p>
<ol>
<li>The API response includes a <code>next</code> property with the full URL for the next page</li>
<li>We extract the page number from this URL to ensure we're correctly tracking pagination</li>
<li>We include both <code>page</code> and <code>limit</code> parameters in our requests to ensure consistent results</li>
</ol>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// Extract next page number from the next URL if it exists</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> nextUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> nextPage <span class="token operator">=</span> nextUrl<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>nextPage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>currentPage <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>nextPage<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// Store the current page (next page - 1)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>This approach ensures that our &quot;Load More&quot; button correctly fetches subsequent pages of data rather than repeatedly loading the first page.</p>
<h2>Using the expanded=true Parameter</h2>
<p>Another key optimization in our implementation is the use of the <code>expanded=true</code> parameter. This allows us to get full character details in a single request, eliminating the need for additional API calls to fetch details for each character.</p>
<p>With this parameter, each result in the API response includes a <code>properties</code> object with all character details:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// With expanded=true, each result directly contains properties</span>
<span class="token keyword">return</span> response<span class="token punctuation">.</span>results
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>properties<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">:</span> char <span class="token keyword">is</span> Character <span class="token operator">=></span> char <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>This significantly improves performance by reducing the number of HTTP requests needed to display character data.</p>
<h2>Cosmic Compiler Summary</h2>
<ul>
<li>We've <strong>created TypeScript interfaces</strong> for the swapi.tech API response structure, pleasing the Cosmic Compiler with proper typing</li>
<li>We've <strong>implemented environment configuration</strong> for API URLs, following the Council of Patterns' recommendations</li>
<li>We've <strong>built a robust Star Wars service</strong> with proper error handling and pagination support</li>
<li>We've <strong>optimized API requests</strong> using the expanded=true parameter to get full character details in a single request</li>
<li>We've <strong>created a component</strong> with proper pagination handling to display character data</li>
<li>We've <strong>followed feature-based architecture principles</strong> by organizing our code into core and feature modules</li>
</ul>
<p><em>In our next transmission, we'll explore the mystical art of API mocking with Mock Service Worker (MSW). The Dependency Demons often disrupt external API connections during testing, but MSW offers a powerful shield against their mischief. As the Recursive Philosopher might say, &quot;To test an API service properly, one must first pretend the API doesn't exist at all.&quot;</em></p>
<p><em>May your HTTP requests return 200 OK, your observables never go unsubscribed, and your pagination always work correctly.</em></p>
</content>
  </entry>  <entry>
    <title>Galactic Archives - Feature-Based Architecture</title>
    <link href="https://aaronmaturen.com/musings/post-4-feature-based-architecture/"/>
    <updated>2025-06-04T00:00:00Z</updated>
    <id>https://aaronmaturen.com/musings/post-4-feature-based-architecture/</id>
    <content type="html"><h1>Angular DataSource with SWAPI: Building the Galactic Archives - Feature-Based Architecture</h1>
<p><em>In the chaotic early days of web development, applications grew like wild space fungiâ€”unpredictable, messy, and occasionally toxic to those who maintained them. Developers would throw components, services, and modules into a single directory like they were tossing laundry into a black hole, hoping the compiler would sort it out. Narrator: it did not.</em></p>
<blockquote>
<p>The Ancient Order tells of a project called &quot;The Monolith,&quot; a massive Angular application with a single 50,000-line app.module.ts file. When a junior developer asked why everything was in one module, the tech lead merely whispered, &quot;Historical reasons,&quot; before staring vacantly into the distance. The project was eventually abandoned after it achieved sentience and began rejecting pull requests with snarky comments.</p>
</blockquote>
<h2>The Problem with Architectural Entropy</h2>
<p>As Angular applications grow, they tend toward chaos unless deliberately structured. Components multiply, services entangle, and dependencies form a web so complex that even the bravest developer fears making changes.</p>
<p>The Council of Patterns recognized this problem eons ago (or at least since Angular 2) and bestowed upon us the wisdom of <strong>Feature-Based Architecture</strong>â€”a structural approach that brings order to the chaos.</p>
<h2>What is Feature-Based Architecture?</h2>
<p>Feature-based architecture organizes code around business features rather than technical functions. Instead of grouping all components together and all services elsewhere, we group by feature, creating clear boundaries and reducing cognitive load.</p>
<blockquote>
<p>The Cosmic Compiler once inquired why we would use feature-based architecture. I replied with &quot;Imagine if your kitchen stored all knives in one drawer, all spoons in another room, and all ingredients in a separate building. That's technical organization. Feature-based is having everything you need for pasta in one place, everything for baking in another. When you're making spaghetti, you don't care about cake ingredients.&quot; The Cosmic Compiler nodded in approval at this explanation before continuing to judge my variable naming conventions.</p>
</blockquote>
<h2>Creating Our Feature-Based Structure</h2>
<p>Let's reorganize our application with a proper feature-based structure:</p>
<pre><code>src/
â”œâ”€â”€ app/
â”‚   â”œâ”€â”€ core/              # Core services, guards, interceptors
â”‚   â”œâ”€â”€ features/          # Feature modules
â”‚   â”‚   â””â”€â”€ star-wars/     # Star Wars specific features
â”‚   â”œâ”€â”€ shared/            # Shared components, directives, pipes
â”‚   â””â”€â”€ models/            # Interfaces and types
â”œâ”€â”€ environments/          # Environment configuration
â””â”€â”€ assets/                # Static assets
</code></pre>
<p>Think of this structure as a well-organized starshipâ€”each section has a specific purpose, but they all work together for a common mission.</p>
<h2>Core Module: The Engine Room</h2>
<p>The Core module contains services and functionality used throughout the application but aren't specific to any feature. These are typically singleton services that should be loaded once when the application starts.</p>
<p>Let's create our Core module structure:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Create core directory structure</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> src/app/core/services
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> src/app/core/interceptors
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> src/app/core/guards</code></pre>
<p>Since we're using Angular v18 with standalone components, we don't need a CoreModule class, but we'll still organize our core services in this directory:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/core/services/logging.service.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/core"</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  providedIn<span class="token operator">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LoggingService</span> <span class="token punctuation">{</span>
  <span class="token function">log</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[Galactic Archives] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[Galactic Archives] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>Features Directory: The Living Quarters</h2>
<p>Features are the heart of our applicationâ€”where the actual business logic lives. Each feature should be self-contained with its own components, services, and routes.</p>
<p>Let's set up our Star Wars feature:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Create star-wars feature structure</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> src/app/features/star-wars/components
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> src/app/features/star-wars/services</code></pre>
<p>Here's an example of a simple standalone component in our feature:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/features/star-wars/components/character-list/character-list.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/core"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CommonModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/common"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatCardModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/card"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatButtonModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/button"</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">"app-character-list"</span><span class="token punctuation">,</span>
  standalone<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>CommonModule<span class="token punctuation">,</span> MatCardModule<span class="token punctuation">,</span> MatButtonModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;div
      class="tw-grid tw-grid-cols-1 md:tw-grid-cols-2 lg:tw-grid-cols-3 tw-gap-4"
    >
      &lt;mat-card class="tw-mb-4">
        &lt;mat-card-header>
          &lt;mat-card-title>Luke Skywalker&lt;/mat-card-title>
        &lt;/mat-card-header>
        &lt;mat-card-content>
          &lt;p>A placeholder for our future Star Wars character data&lt;/p>
        &lt;/mat-card-content>
        &lt;mat-card-actions>
          &lt;button mat-button>VIEW DETAILS&lt;/button>
        &lt;/mat-card-actions>
      &lt;/mat-card>
    &lt;/div>
  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CharacterListComponent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>
<h2>Shared Module: The Common Areas</h2>
<p>The Shared module contains components, directives, and pipes used across multiple features. These are the reusable building blocks of our UI.</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Create shared directory structure</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> src/app/shared/components
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> src/app/shared/directives
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> src/app/shared/pipes</code></pre>
<p>Let's create a simple loading spinner component:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/shared/components/loading-spinner/loading-spinner.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> Input <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/core"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CommonModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/common"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatProgressSpinnerModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/progress-spinner"</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">"app-loading-spinner"</span><span class="token punctuation">,</span>
  standalone<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>CommonModule<span class="token punctuation">,</span> MatProgressSpinnerModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;div
      class="tw-flex tw-justify-center tw-items-center tw-p-4"
      [class.tw-h-full]="fullHeight"
    >
      &lt;mat-spinner [diameter]="diameter" [color]="color">&lt;/mat-spinner>
    &lt;/div>
  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LoadingSpinnerComponent</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Input</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> diameter <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Input</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> color<span class="token operator">:</span> <span class="token string">"primary"</span> <span class="token operator">|</span> <span class="token string">"accent"</span> <span class="token operator">|</span> <span class="token string">"warn"</span> <span class="token operator">=</span> <span class="token string">"primary"</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Input</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> fullHeight <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2>Models: The Blueprint Archives</h2>
<p>Models define the shape of our data. Clear interfaces make our code more predictable and enable better tooling support.</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Create models directory</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> src/app/models</code></pre>
<p>Let's define some interfaces for our Star Wars data:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/models/character.model.ts</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Character</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  height<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  mass<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  hair_color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  skin_color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  eye_color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  birth_year<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  gender<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  homeworld<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  films<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  species<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  vehicles<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  starships<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  created<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  edited<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// src/app/models/api-response.model.ts</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ApiResponse<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">{</span>
  count<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  next<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  previous<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  results<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2>Environment Configuration: The Control Panel</h2>
<p>Environment configurations allow us to change settings based on where our application is running (development, staging, production).</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/environments/environment.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> environment <span class="token operator">=</span> <span class="token punctuation">{</span>
  production<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  apiUrl<span class="token operator">:</span> <span class="token string">"https://swapi.dev/api/"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// src/environments/environment.prod.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> environment <span class="token operator">=</span> <span class="token punctuation">{</span>
  production<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  apiUrl<span class="token operator">:</span> <span class="token string">"https://swapi.dev/api/"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h2>Routing with Feature-Based Architecture</h2>
<p>With our feature-based architecture, we can organize routes to match our structure:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/app.routes.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Routes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/router"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> routes<span class="token operator">:</span> Routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> redirectTo<span class="token operator">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span> pathMatch<span class="token operator">:</span> <span class="token string">"full"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>
    <span class="token function-variable function">loadComponent</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
      <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./features/home/home.component"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">=></span> m<span class="token punctuation">.</span>HomeComponent<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token string">"characters"</span><span class="token punctuation">,</span>
    <span class="token function-variable function">loadComponent</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
      <span class="token keyword">import</span><span class="token punctuation">(</span>
        <span class="token string">"./features/star-wars/components/character-list/character-list.component"</span>
      <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">=></span> m<span class="token punctuation">.</span>CharacterListComponent<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">"**"</span><span class="token punctuation">,</span> redirectTo<span class="token operator">:</span> <span class="token string">"home"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<h2>Testing in a Feature-Based Architecture</h2>
<p>Our feature-based architecture makes testing more intuitive since our tests are colocated with our features:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/features/star-wars/components/character-list/character-list.component.spec.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ComponentFixture<span class="token punctuation">,</span> TestBed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/core/testing"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CharacterListComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./character-list.component"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> NoopAnimationsModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/platform-browser/animations"</span><span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"CharacterListComponent"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> component<span class="token operator">:</span> CharacterListComponent<span class="token punctuation">;</span>
  <span class="token keyword">let</span> fixture<span class="token operator">:</span> ComponentFixture<span class="token operator">&lt;</span>CharacterListComponent<span class="token operator">></span><span class="token punctuation">;</span>

  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> TestBed<span class="token punctuation">.</span><span class="token function">configureTestingModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      imports<span class="token operator">:</span> <span class="token punctuation">[</span>CharacterListComponent<span class="token punctuation">,</span> NoopAnimationsModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compileComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    fixture <span class="token operator">=</span> TestBed<span class="token punctuation">.</span><span class="token function">createComponent</span><span class="token punctuation">(</span>CharacterListComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    component <span class="token operator">=</span> fixture<span class="token punctuation">.</span>componentInstance<span class="token punctuation">;</span>
    fixture<span class="token punctuation">.</span><span class="token function">detectChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"should create"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<p>The Cosmic Compiler once witnessed a developer trying to test a component with 47 dependencies. As the developer struggled to mock each one, the Compiler whispered, &quot;Perhaps the problem isn't with your tests.&quot; The developer ignored this wisdom and continued adding mocks until the test file was larger than the actual application. Some say they're still adding mocks to this day, trapped in an infinite loop of dependency injection.</p>
</blockquote>
<h2>Benefits of Feature-Based Architecture</h2>
<p>This architecture provides several benefits:</p>
<ol>
<li><strong>Scalability</strong>: Features can grow independently without affecting others</li>
<li><strong>Maintainability</strong>: Related code is grouped together, making it easier to understand</li>
<li><strong>Testability</strong>: Clear boundaries make testing more straightforward</li>
<li><strong>Reusability</strong>: Shared components can be used across features</li>
<li><strong>Lazy Loading</strong>: Features can be loaded on demand, improving performance</li>
</ol>
<h2>Cosmic Compiler Summary</h2>
<ul>
<li>We've <strong>created a feature-based architecture</strong> with clear separation of concerns</li>
<li>We've <strong>organized our code</strong> into core, features, shared, and models</li>
<li>We've <strong>set up environment configuration</strong> for different deployment targets</li>
<li>We've <strong>created standalone components</strong> that fit into our architecture</li>
<li>We've <strong>structured our routing</strong> to align with our feature-based approach</li>
</ul>
<p><em>In our next transmission, we'll implement the Star Wars API service that will power our Galactic Archives. We'll leverage our new architecture to create a robust service layer that communicates with the SWAPI endpoints, handling errors and transforming data with the elegance of a Jedi Master.</em></p>
<p><em>May your architecture be clean and your dependencies few.</em></p>
</content>
  </entry>  <entry>
    <title>Galactic Archives - Testing Setup</title>
    <link href="https://aaronmaturen.com/musings/post-3-testing-setup/"/>
    <updated>2025-06-03T00:00:00Z</updated>
    <id>https://aaronmaturen.com/musings/post-3-testing-setup/</id>
    <content type="html"><h1>Angular DataSource with SWAPI: Building the Galactic Archives - Testing Setup with Jest and Playwright</h1>
<p><em>In a parallel universe where bugs fix themselves and edge cases don't exist, testing might be optional. Unfortunately, we live in this universe, where untested code tends to explode spectacularly the moment it encounters production environmentsâ€”a phenomenon the Ancient Order of Angular calls &quot;The Demo Effect.&quot;</em></p>
<blockquote>
<p>Legend has it that a senior developer once confidently declared, &quot;I don't need to test this change, it's just one line of code,&quot; right before his demo to the CEO crashed so spectacularly that it rebooted the CFO's laptop three rooms away. The Ancient Order still uses his terminal output as a teaching tool for junior developers.</p>
</blockquote>
<h2>The Testing Imperative</h2>
<p>Before we dive into the exciting world of Star Wars data, we need to establish proper testing infrastructure. Without tests, we're essentially piloting a starship blindfolded through an asteroid fieldâ€”technically possible, but with a high probability of spectacular failure.</p>
<p>The Cosmic Compiler judges our code not just by its functionality, but by its testability. Today, we'll set up two powerful testing tools: Jest for unit and integration tests, and Playwright for end-to-end testing.</p>
<p>Think of unit tests as microscopes examining individual cells of your application, while end-to-end tests are more like taking your application to a crowded shopping mall and seeing if it has a public meltdown. Unit tests say, &quot;Does this function return 42 when I pass it the ultimate question?&quot; E2E tests say, &quot;Can a sleep-deprived user with exactly 16 browser tabs open still navigate our checkout flow at 3 AM?&quot;</p>
<p>The Council of Patterns has a saying: &quot;Unit tests tell you if your code is broken; E2E tests tell you if your users are broken.&quot; Both are equally important discoveries.</p>
<h2>Setting Up Jest</h2>
<p>Angular's default testing framework is Karma/Jasmine, but the Council of Patterns has decreed Jest to be more efficient for modern applications. Let's make the switch:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Remove the default testing setup</span>
<span class="token function">npm</span> remove karma karma-chrome-launcher karma-coverage karma-jasmine karma-jasmine-html-reporter

<span class="token comment"># Install Jest and related packages</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> jest @types/jest jest-preset-angular ts-jest</code></pre>
<p>Now, let's create a <code>jest.config.js</code> file in the project root:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// jest.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">preset</span><span class="token operator">:</span> <span class="token string">"jest-preset-angular"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">setupFilesAfterEnv</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;rootDir>/setup-jest.ts"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">testPathIgnorePatterns</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"&lt;rootDir>/node_modules/"</span><span class="token punctuation">,</span>
    <span class="token string">"&lt;rootDir>/dist/"</span><span class="token punctuation">,</span>
    <span class="token string">"&lt;rootDir>/e2e/"</span><span class="token punctuation">,</span> <span class="token comment">// Since we're using playwrite for e2e we need to exclude them from jest. The Cosmic Compiler appreciates separation of test types</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">coverageDirectory</span><span class="token operator">:</span> <span class="token string">"coverage"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">coverageReporters</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token string">"lcov"</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">moduleNameMapper</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">"^src/(.*)$"</span><span class="token operator">:</span> <span class="token string">"&lt;rootDir>/src/$1"</span><span class="token punctuation">,</span> <span class="token comment">// For clean imports</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">testMatch</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"**/*.spec.ts"</span><span class="token punctuation">,</span> <span class="token comment">// The Ancient Order of Angular prefers .spec.ts for test files</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>Next, create a <code>setup-jest.ts</code> file:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// setup-jest.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setupZoneTestEnv <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"jest-preset-angular/setup-env/zone"</span><span class="token punctuation">;</span>

<span class="token function">setupZoneTestEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Global mocks go here</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">"CSS"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">"doctype"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  value<span class="token operator">:</span> <span class="token string">"&lt;!DOCTYPE html>"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">"getComputedStyle"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    display<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>
    appearance<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"-webkit-appearance"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Update your <code>tsconfig.spec.json</code>:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"./tsconfig.json"</span><span class="token punctuation">,</span>
  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./out-tsc/spec"</span><span class="token punctuation">,</span>
    <span class="token property">"types"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"jest"</span><span class="token punctuation">,</span> <span class="token string">"node"</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/**/*.spec.ts"</span><span class="token punctuation">,</span> <span class="token string">"src/**/*.d.ts"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre>
<p>Finally, update your <code>package.json</code> scripts:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... other scripts</span>
    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"jest"</span><span class="token punctuation">,</span>
    <span class="token property">"test:watch"</span><span class="token operator">:</span> <span class="token string">"jest --watch"</span><span class="token punctuation">,</span>
    <span class="token property">"test:coverage"</span><span class="token operator">:</span> <span class="token string">"jest --coverage"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>Setting Up Playwright</h2>
<p>For end-to-end testing, we'll use Playwright, which allows us to test our application across multiple browsers:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Install Playwright</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> @playwright/test</code></pre>
<p>Initialize Playwright configuration:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># The Cosmic Compiler appreciates proper initialization</span>
npx playwright <span class="token function">install</span>
npx playwright install-deps</code></pre>
<p>Create a <code>playwright.config.ts</code> file:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// playwright.config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig<span class="token punctuation">,</span> devices <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@playwright/test"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  testDir<span class="token operator">:</span> <span class="token string">"./e2e"</span><span class="token punctuation">,</span>
  fullyParallel<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  forbidOnly<span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CI</span><span class="token punctuation">,</span>
  retries<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CI</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  workers<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CI</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  reporter<span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>
  use<span class="token operator">:</span> <span class="token punctuation">{</span>
    baseURL<span class="token operator">:</span> <span class="token string">"http://localhost:4200"</span><span class="token punctuation">,</span>
    trace<span class="token operator">:</span> <span class="token string">"on-first-retry"</span><span class="token punctuation">,</span>
    screenshot<span class="token operator">:</span> <span class="token string">"only-on-failure"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  projects<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">"chromium"</span><span class="token punctuation">,</span>
      use<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span>devices<span class="token punctuation">[</span><span class="token string">"Desktop Chrome"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">"firefox"</span><span class="token punctuation">,</span>
      use<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span>devices<span class="token punctuation">[</span><span class="token string">"Desktop Firefox"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">"webkit"</span><span class="token punctuation">,</span>
      use<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span>devices<span class="token punctuation">[</span><span class="token string">"Desktop Safari"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  webServer<span class="token operator">:</span> <span class="token punctuation">{</span>
    command<span class="token operator">:</span> <span class="token string">"npm run start"</span><span class="token punctuation">,</span>
    url<span class="token operator">:</span> <span class="token string">"http://localhost:4200"</span><span class="token punctuation">,</span>
    reuseExistingServer<span class="token operator">:</span> <span class="token operator">!</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CI</span><span class="token punctuation">,</span>
    timeout<span class="token operator">:</span> <span class="token number">120000</span><span class="token punctuation">,</span> <span class="token comment">// The Dependency Demons require patience during startup</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Create an <code>e2e</code> directory with a sample test:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// e2e/app.spec.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@playwright/test"</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"has title"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Wait for the title to be visible</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">"h1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContainText</span><span class="token punctuation">(</span><span class="token string">"Galactic Archives"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"navigates to home page"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Check if the app shell is rendered</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">"footer"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Update your <code>package.json</code> scripts for Playwright:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... other scripts</span>
    <span class="token property">"e2e"</span><span class="token operator">:</span> <span class="token string">"playwright test"</span><span class="token punctuation">,</span>
    <span class="token property">"e2e:ui"</span><span class="token operator">:</span> <span class="token string">"playwright test --ui"</span><span class="token punctuation">,</span>
    <span class="token property">"e2e:report"</span><span class="token operator">:</span> <span class="token string">"playwright show-report"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>Creating Basic Unit Tests</h2>
<p>Let's create a simple test for our app component:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/app.component.spec.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ComponentFixture<span class="token punctuation">,</span> TestBed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/core/testing"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> RouterTestingModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/router/testing"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./app.component"</span><span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"AppComponent"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> component<span class="token operator">:</span> AppComponent<span class="token punctuation">;</span>
  <span class="token keyword">let</span> fixture<span class="token operator">:</span> ComponentFixture<span class="token operator">&lt;</span>AppComponent<span class="token operator">></span><span class="token punctuation">;</span>

  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> TestBed<span class="token punctuation">.</span><span class="token function">configureTestingModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      imports<span class="token operator">:</span> <span class="token punctuation">[</span>
        RouterTestingModule<span class="token punctuation">,</span>
        AppComponent<span class="token punctuation">,</span> <span class="token comment">// Import the standalone component directly</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compileComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    fixture <span class="token operator">=</span> TestBed<span class="token punctuation">.</span><span class="token function">createComponent</span><span class="token punctuation">(</span>AppComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    component <span class="token operator">=</span> fixture<span class="token punctuation">.</span>componentInstance<span class="token punctuation">;</span>
    fixture<span class="token punctuation">.</span><span class="token function">detectChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"should create the app"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// The Cosmic Compiler expects components to exist</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">should have the correct title</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">"Galactic Archives"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"should render title in header"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> compiled <span class="token operator">=</span> fixture<span class="token punctuation">.</span>nativeElement <span class="token keyword">as</span> HTMLElement<span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>compiled<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"header h1"</span><span class="token punctuation">)</span><span class="token operator">?.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span>
      <span class="token string">"Galactic Archives"</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"should have the current year in the footer"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> compiled <span class="token operator">=</span> fixture<span class="token punctuation">.</span>nativeElement <span class="token keyword">as</span> HTMLElement<span class="token punctuation">;</span>
    <span class="token keyword">const</span> currentYear <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>compiled<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"footer"</span><span class="token punctuation">)</span><span class="token operator">?.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span>
      currentYear
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2>Testing Standalone Components</h2>
<p>Angular v18's standalone components require a slightly different testing approach. Since we're not using NgModules, we need to import our components directly into the test module:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/features/example/example.component.spec.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ComponentFixture<span class="token punctuation">,</span> TestBed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/core/testing"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ExampleComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./example.component"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatButtonModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/button"</span><span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"ExampleComponent"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> component<span class="token operator">:</span> ExampleComponent<span class="token punctuation">;</span>
  <span class="token keyword">let</span> fixture<span class="token operator">:</span> ComponentFixture<span class="token operator">&lt;</span>ExampleComponent<span class="token operator">></span><span class="token punctuation">;</span>

  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> TestBed<span class="token punctuation">.</span><span class="token function">configureTestingModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      imports<span class="token operator">:</span> <span class="token punctuation">[</span>
        ExampleComponent<span class="token punctuation">,</span>
        <span class="token comment">// Import any dependencies the component has</span>
        MatButtonModule<span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compileComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    fixture <span class="token operator">=</span> TestBed<span class="token punctuation">.</span><span class="token function">createComponent</span><span class="token punctuation">(</span>ExampleComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    component <span class="token operator">=</span> fixture<span class="token punctuation">.</span>componentInstance<span class="token punctuation">;</span>
    fixture<span class="token punctuation">.</span><span class="token function">detectChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"should create"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2>Looking Ahead: Testing and Architecture</h2>
<p>In the next post, we'll dive into feature-based architecture and how it shapes our testing strategy. For now, we've set up the testing tools we need, but the real magic happens when we align our tests with a well-structured application.</p>
<blockquote>
<p>The Ancient Order tells of a developer who organized all their code in a single file named &quot;everything.ts&quot; with 17,000 lines. Legend says that when asked about testing strategy, they simply laughed maniacally before disappearing into the night, never to be seen again. Some say their ghost still haunts legacy codebases, whispering &quot;just one more function&quot; to unsuspecting juniors.</p>
</blockquote>
<p>With our testing foundations in place, we're ready to build our application with testability in mind from the start.</p>
<h2>When to Use Each Testing Approach</h2>
<p>Different testing tools serve different purposes, much like how different lightsaber crystals produce different blade colors:</p>
<h3>Jest (Unit &amp; Integration Tests)</h3>
<p>Jest excels at testing individual units of code and their interactions:</p>
<ul>
<li><strong>Component Tests</strong>: Verify that components render correctly and respond to user interactions</li>
<li><strong>Service Tests</strong>: Ensure services process data correctly and handle errors gracefully</li>
<li><strong>Pipe Tests</strong>: Validate that pipes transform data as expected</li>
<li><strong>Directive Tests</strong>: Check that directives modify the DOM correctly</li>
</ul>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// Example service test</span>
<span class="token comment">// src/app/core/services/example.service.spec.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> TestBed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/core/testing"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ExampleService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./example.service"</span><span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"ExampleService"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> service<span class="token operator">:</span> ExampleService<span class="token punctuation">;</span>

  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    TestBed<span class="token punctuation">.</span><span class="token function">configureTestingModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    service <span class="token operator">=</span> TestBed<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>ExampleService<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"should be created"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"should transform data correctly"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"Luke"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> expected <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"LUKE"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">transformData</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// The Cosmic Compiler appreciates thorough error testing</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"should handle null input gracefully"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> service<span class="token punctuation">.</span><span class="token function">transformData</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3>Playwright (End-to-End Tests)</h3>
<p>Playwright tests the application as a whole, simulating real user interactions:</p>
<ul>
<li><strong>User Flows</strong>: Test complete user journeys through the application</li>
<li><strong>Visual Regression</strong>: Ensure the UI appears as expected across browsers</li>
<li><strong>Network Interactions</strong>: Verify that the application interacts correctly with backend services</li>
<li><strong>Performance</strong>: Check that the application loads and responds within acceptable timeframes</li>
<li><strong>Accessibility</strong>: Ensure your app works for everyone (foreshadowing: the Cosmic Compiler judges harshly those who forget this step, as we'll discover in a future post)</li>
</ul>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// Example user flow test</span>
<span class="token comment">// e2e/navigation.spec.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@playwright/test"</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"user can navigate through the application"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Start at the home page</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Check initial state</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">"h1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContainText</span><span class="token punctuation">(</span><span class="token string">"Galactic Archives"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Navigate to another page (once we have one)</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"Characters"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Verify navigation worked</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveURL</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*\/characters</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// The Dependency Demons fear thorough testing</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">"h2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContainText</span><span class="token punctuation">(</span><span class="token string">"Star Wars Characters"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2>Running Our Tests</h2>
<p>Let's make sure our testing setup works:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Run Jest tests</span>
<span class="token function">npm</span> <span class="token builtin class-name">test</span>

<span class="token comment"># Run Playwright tests (make sure the app is running)</span>
<span class="token function">npm</span> run e2e</code></pre>
<p>If everything is configured correctly, you should see the test results in your terminal. The Cosmic Compiler will be pleased with your diligence.</p>
<h2>Cosmic Compiler Summary</h2>
<ul>
<li>We've <strong>set up Jest</strong> for unit and integration testing, replacing the default Karma/Jasmine setup</li>
<li>We've <strong>configured Playwright</strong> for end-to-end testing across multiple browsers</li>
<li>We've <strong>created basic tests</strong> for both frameworks to validate our setup</li>
<li>We've <strong>explained when to use each testing approach</strong> for different testing scenarios</li>
<li>We've <strong>added convenient test scripts</strong> to our package.json for running tests</li>
</ul>
<p><em>In our next transmission, we'll establish a proper feature-based architecture for our application, creating the foundation upon which our Galactic Archives will be built. The Council of Patterns has provided ancient scrolls detailing the optimal structure for Angular applicationsâ€”scrolls that suspiciously resemble modern best practices documentation.</em></p>
<p><em>May your tests be green and your coverage be high.</em></p>
</content>
  </entry>  <entry>
    <title>Galactic Archives - Code Quality Setup</title>
    <link href="https://aaronmaturen.com/musings/post-2-code-quality-setup/"/>
    <updated>2025-06-02T00:00:00Z</updated>
    <id>https://aaronmaturen.com/musings/post-2-code-quality-setup/</id>
    <content type="html"><h1>Angular DataSource with SWAPI: Building the Galactic Archives - Code Quality Setup</h1>
<p><em>In the vast expanse of the coding universe, there exists a special circle of developer hell reserved for those who commit unformatted code to repositories. It's a place where tabs and spaces wage eternal war, where semicolons appear and disappear like quantum particles, and where the Dependency Demons feast on inconsistent casing conventions.</em></p>
<h2>The Quest for Code Quality</h2>
<p>Any project worth its weight in bytes needs a proper code quality setup. Without it, even the most elegant architecture will eventually collapse under the weight of inconsistent formatting, unused variables, and the dreaded &quot;any&quot; type that lurks in the shadows.</p>
<p>The Ancient Order of Angular has long decreed that proper linting and formatting are not mere suggestions but sacred obligations. As the TypeScript Prophecies foretold: &quot;He who uses any shall debug for eternity.&quot;</p>
<h2>Setting Up ESLint</h2>
<p>ESLint serves as our first line of defense against the forces of code entropy. Let's summon it into our project:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Invoke the linting guardians</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-plugin-import

<span class="token comment"># Angular-specific ESLint rules</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> @angular-eslint/eslint-plugin @angular-eslint/eslint-plugin-template @angular-eslint/template-parser</code></pre>
<p>Now, let's create our <code>.eslintrc.json</code> configuration file:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"root"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"ignorePatterns"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"projects/**/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"overrides"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"*.ts"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">"eslint:recommended"</span><span class="token punctuation">,</span>
        <span class="token string">"plugin:@typescript-eslint/recommended"</span><span class="token punctuation">,</span>
        <span class="token string">"plugin:@angular-eslint/recommended"</span><span class="token punctuation">,</span>
        <span class="token string">"plugin:@angular-eslint/template/process-inline-templates"</span><span class="token punctuation">,</span>
        <span class="token string">"plugin:prettier/recommended"</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// The Ancient Order of Angular demands proper naming</span>
        <span class="token property">"@angular-eslint/directive-selector"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token string">"error"</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"attribute"</span><span class="token punctuation">,</span>
            <span class="token property">"prefix"</span><span class="token operator">:</span> <span class="token string">"app"</span><span class="token punctuation">,</span>
            <span class="token property">"style"</span><span class="token operator">:</span> <span class="token string">"camelCase"</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">"@angular-eslint/component-selector"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token string">"error"</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"element"</span><span class="token punctuation">,</span>
            <span class="token property">"prefix"</span><span class="token operator">:</span> <span class="token string">"app"</span><span class="token punctuation">,</span>
            <span class="token property">"style"</span><span class="token operator">:</span> <span class="token string">"kebab-case"</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"*.html"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">"plugin:@angular-eslint/template/recommended"</span><span class="token punctuation">,</span>
        <span class="token string">"plugin:@angular-eslint/template/accessibility"</span><span class="token punctuation">,</span>
        <span class="token string">"plugin:prettier/recommended"</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre>
<h2>Configuring Prettier</h2>
<p>While ESLint ensures our code follows best practices, Prettier ensures it looks consistently beautiful. The Galactic Standards Committee has strict regulations about code aesthetics:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Summon the formatting entity</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> prettier eslint-config-prettier eslint-plugin-prettier</code></pre>
<p>Create a <code>.prettierrc</code> file:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"semi"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"tabWidth"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token property">"printWidth"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
  <span class="token property">"trailingComma"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span>
  <span class="token property">"bracketSpacing"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"arrowParens"</span><span class="token operator">:</span> <span class="token string">"avoid"</span><span class="token punctuation">,</span>
  <span class="token property">"endOfLine"</span><span class="token operator">:</span> <span class="token string">"lf"</span><span class="token punctuation">,</span>
  <span class="token property">"overrides"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">"files"</span><span class="token operator">:</span> <span class="token string">"*.html"</span><span class="token punctuation">,</span>
      <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"parser"</span><span class="token operator">:</span> <span class="token string">"html"</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre>
<p>The configuration above already includes Prettier integration with the <code>plugin:prettier/recommended</code> extension.</p>
<h2>Setting Up Pre-commit Hooks</h2>
<p>To prevent SchrÃ¶dinger's Bugs from sneaking into our codebase, we'll set up pre-commit hooks using Husky and lint-staged. Husky intercepts Git commands like <code>commit</code> and <code>push</code>, allowing us to run scripts before they complete. Lint-staged works alongside Husky by running commands only on files that are staged for commit, making the process lightning fast. Together, they create a formidable defense system - Husky catches the commit attempt while lint-staged efficiently processes only what's changed. This means linting and formatting happen automatically before code enters your repository, eliminating those embarrassing &quot;fix formatting&quot; commits that clutter your history. The Ancient Order of Angular considers this combination essential for maintaining codebase sanity:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Summon the guardians of the commit gate</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> husky lint-staged</code></pre>
<p>Initialize Husky:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Initialize the ancient ritual of pre-commit validation</span>
npx husky init</code></pre>
<p>Create a <code>.husky/pre-commit</code> file:</p>
<pre class="language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>
<span class="token builtin class-name">.</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> <span class="token string">"<span class="token variable">$0</span>"</span><span class="token variable">)</span></span>/_/husky.sh"</span>

npx lint-staged</code></pre>
<p>Now, configure lint-staged in your <code>package.json</code>:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"lint-staged"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"*.{ts,html}"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"eslint --fix"</span><span class="token punctuation">,</span> <span class="token string">"prettier --write"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"*.{css,scss}"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"prettier --write"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"*.{json,md}"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"prettier --write"</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>Adding Scripts to package.json</h2>
<p>Let's add some helpful scripts to our <code>package.json</code>:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... existing scripts</span>
    <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint \"src/**/*.{ts,html}\""</span><span class="token punctuation">,</span>
    <span class="token property">"lint:fix"</span><span class="token operator">:</span> <span class="token string">"eslint \"src/**/*.{ts,html}\" --fix"</span><span class="token punctuation">,</span>
    <span class="token property">"format"</span><span class="token operator">:</span> <span class="token string">"prettier --write \"src/**/*.{ts,html,scss,json,md}\""</span><span class="token punctuation">,</span>
    <span class="token property">"format:check"</span><span class="token operator">:</span> <span class="token string">"prettier --check \"src/**/*.{ts,html,scss,json,md}\""</span><span class="token punctuation">,</span>
    <span class="token property">"prepare"</span><span class="token operator">:</span> <span class="token string">"husky install"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>Integrating with VS Code</h2>
<p>To ensure the Cosmic Compiler's blessings extend to our development environment, let's configure VS Code:</p>
<p>Create a <code>.vscode/settings.json</code> file:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"editor.codeActionsOnSave"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"source.fixAll.eslint"</span><span class="token operator">:</span> <span class="token string">"explicit"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span><span class="token punctuation">,</span>
  <span class="token property">"[typescript]"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"[html]"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"[scss]"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"typescript"</span><span class="token punctuation">,</span> <span class="token string">"html"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"prettier.documentSelectors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"**/*.{ts,js,html,scss,css,json,md}"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre>
<p>Don't forget to install the necessary VS Code extensions:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Install the sacred extensions</span>
code --install-extension dbaeumer.vscode-eslint
code --install-extension esbenp.prettier-vscode
code --install-extension angular.ng-template</code></pre>
<h2>Example Lint Fixes</h2>
<p>Let's see how our setup helps us avoid the Void of Undefined and other coding perils:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// Before: A code snippet that would anger the Cosmic Compiler</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">GalacticService</span> <span class="token punctuation">{</span>
  <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// No return type! The horror!</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/api/planets"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
      <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token comment">// Implicit any! The Cosmic Compiler weeps!</span>
        <span class="token keyword">return</span> data<span class="token punctuation">.</span>results<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// After: Code that pleases the Ancient Order of Angular</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">GalacticService</span> <span class="token punctuation">{</span>
  <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>Planet<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>PlanetResponse<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"/api/planets"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
      <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token operator">:</span> PlanetResponse<span class="token punctuation">)</span><span class="token operator">:</span> Planet<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> data<span class="token punctuation">.</span>results<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>The Benefits of Our Setup</h2>
<p>With our code quality guardians in place:</p>
<ol>
<li><strong>Consistent Formatting</strong>: No more debates about tabs vs. spaces or where to put those pesky curly braces</li>
<li><strong>Automatic Error Prevention</strong>: Catch potential issues before they become SchrÃ¶dinger's Bugs</li>
<li><strong>Enforced Best Practices</strong>: Follow the wisdom of the Ancient Order of Angular</li>
<li><strong>Improved Collaboration</strong>: Everyone's code looks like it was written by the same developer</li>
<li><strong>Cleaner Git History</strong>: No more commits that just fix formatting</li>
</ol>
<h2>Cosmic Compiler Summary</h2>
<ul>
<li>We've <strong>set up ESLint</strong> with Angular-specific rules to enforce code quality standards</li>
<li>We've <strong>configured Prettier</strong> to ensure consistent code formatting across the project</li>
<li>We've <strong>integrated ESLint and Prettier</strong> to work together harmoniously</li>
<li>We've <strong>established pre-commit hooks</strong> with Husky and lint-staged to prevent bad code from entering our repository</li>
<li>We've <strong>configured VS Code</strong> to automatically format and lint our code as we work</li>
</ul>
<p><em>In our next transmission, we'll dive into creating the Star Wars API service, where we'll establish contact with the distant SWAPI galaxy. The Recursive Philosopher reminds us that &quot;to fetch data, one must first understand what data is.&quot; Profound, if somewhat unhelpful in practice.</em></p>
<p><em>May your linters be strict and your formatters consistent.</em></p>
</content>
  </entry>  <entry>
    <title>Galactic Archives - Datasource</title>
    <link href="https://aaronmaturen.com/musings/post-7-datasource-foundation/"/>
    <updated>2025-06-01T00:00:00Z</updated>
    <id>https://aaronmaturen.com/musings/post-7-datasource-foundation/</id>
    <content type="html"><h1>Angular DataSource with SWAPI: Building the Galactic Archives - DataSource Foundation</h1>
<p><em>After six transmissions of preparation, we finally arrive at the core of our mission: implementing the legendary DataSource pattern. The Ancient Order of Angular's sacred texts describe it as &quot;the separation that brings clarity&quot; - a pattern designed to bring balance to the chaotic realm of data management in components.</em></p>
<h2>The Component Data Problem</h2>
<p>Before diving into the DataSource pattern, let's understand the problem it solves. In typical Angular applications, components often:</p>
<ol>
<li>Fetch data directly from services</li>
<li>Manage loading states</li>
<li>Handle pagination logic</li>
<li>Track error states</li>
<li>Implement sorting and filtering</li>
</ol>
<p>This leads to bloated components that violate the Single Responsibility Principle faster than a Sith Lord violates peace treaties.</p>
<blockquote>
<p>The Cosmic Compiler once reviewed a component that was handling API calls, pagination, sorting, filtering, and rendering all in one file. It simply printed &quot;No&quot; in the terminal and refused to compile further. Some say that component still sits in a forgotten git branch, a cautionary tale for those who dare to mix concerns.</p>
</blockquote>
<h2>Enter the DataSource Pattern</h2>
<p>The DataSource pattern separates data management from presentation concerns. It's an abstraction that:</p>
<ol>
<li>Manages data fetching and state</li>
<li>Handles pagination, sorting, and filtering</li>
<li>Exposes observables that components can subscribe to</li>
<li>Centralizes data-related logic</li>
</ol>
<p>Angular's CDK (Component Development Kit) provides a <code>DataSource</code> abstract class that we can extend to create our own implementation.</p>
<h2>Creating the GalacticDataSource</h2>
<p>Let's implement our <code>GalacticDataSource</code> class that will power the Galactic Archives:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/features/star-wars/datasources/galactic-datasource.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> DataSource <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/cdk/collections"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> BehaviorSubject<span class="token punctuation">,</span> Observable<span class="token punctuation">,</span> Subscription <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"rxjs"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Character <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../../models/character.model"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> StarWarsService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../../core/services/star-wars.service"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">GalacticDataSource</span> <span class="token keyword">extends</span> <span class="token class-name">DataSource<span class="token operator">&lt;</span>Character<span class="token operator">></span></span> <span class="token punctuation">{</span>
  <span class="token comment">// Internal subjects to manage state</span>
  <span class="token keyword">private</span> charactersSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject<span class="token operator">&lt;</span>Character<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> loadingSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> countSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> subscription <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subscription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Public observables that components can subscribe to</span>
  <span class="token keyword">public</span> loading$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">asObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> count$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>countSubject<span class="token punctuation">.</span><span class="token function">asObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> starWarsService<span class="token operator">:</span> StarWarsService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * The connect method is called by the table to retrieve the data.
   * This method is part of the DataSource API and is called when the table
   * needs the data to display.
   */</span>
  <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>Character<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token comment">// Return the observable that emits the data</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>charactersSubject<span class="token punctuation">.</span><span class="token function">asObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * The disconnect method is called when the table is destroyed.
   * This method is part of the DataSource API and is called when the table
   * is removed from the DOM.
   */</span>
  <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token comment">// Clean up subscriptions and complete subjects</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>charactersSubject<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>countSubject<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * Load characters from the API
   * @param page The page number to load
   */</span>
  <span class="token function">loadCharacters</span><span class="token punctuation">(</span>page<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>starWarsService<span class="token punctuation">.</span><span class="token function">getCharacters</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
          <span class="token comment">// Extract characters from the response</span>
          <span class="token keyword">const</span> characters <span class="token operator">=</span> response<span class="token punctuation">.</span>results<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token comment">// Update our subjects with the new data</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>charactersSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>characters<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>countSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>total_records<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
          <span class="token comment">// Handle errors</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>Understanding the DataSource Lifecycle</h2>
<p>The <code>DataSource</code> abstract class requires us to implement two key methods:</p>
<h3>1. connect()</h3>
<p>This method is called when a component (typically a table or list) connects to the DataSource. It should return an Observable that emits the data to be displayed. In our implementation, we return the <code>charactersSubject</code> as an observable.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>Character<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>charactersSubject<span class="token punctuation">.</span><span class="token function">asObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3>2. disconnect()</h3>
<p>This method is called when the component disconnects from the DataSource (usually when the component is destroyed). It's our chance to clean up any subscriptions or resources to prevent memory leaks.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>charactersSubject<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>countSubject<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<p>A wise member of the Council of Patterns once said: &quot;A DataSource that doesn't properly implement disconnect() is like a Jedi who doesn't turn off their lightsaber - eventually, something's going to get burned.&quot; The Recursive Philosopher added: &quot;And that something is usually your application's memory.&quot;</p>
</blockquote>
<h2>Exposing Observables for Components</h2>
<p>One of the key benefits of the DataSource pattern is that it exposes observables that components can subscribe to. This allows components to reactively update when data changes.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// Internal subjects (private)</span>
<span class="token keyword">private</span> charactersSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject<span class="token operator">&lt;</span>Character<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> loadingSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> countSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Public observables (components subscribe to these)</span>
<span class="token keyword">public</span> loading$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">asObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> count$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>countSubject<span class="token punctuation">.</span><span class="token function">asObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Note that we expose the subjects as observables using the <code>asObservable()</code> method. This prevents components from directly calling <code>next()</code> on our subjects, maintaining proper encapsulation.</p>
<h2>Using BehaviorSubject for State Management</h2>
<p>We use <code>BehaviorSubject</code> rather than regular <code>Subject</code> because:</p>
<ol>
<li>It requires an initial value, ensuring subscribers always get a value</li>
<li>It caches the latest value, so new subscribers immediately receive the current state</li>
<li>It works perfectly for representing the current state of our data</li>
</ol>
<p>This is particularly useful for UI components that need to know the current state when they initialize.</p>
<h2>Basic Usage in a Component</h2>
<p>Here's a simple example of how a component would use our DataSource:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/app/features/star-wars/components/character-list/character-list.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> OnDestroy<span class="token punctuation">,</span> OnInit<span class="token punctuation">,</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/core"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CommonModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/common"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatCardModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/card"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatProgressSpinnerModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/progress-spinner"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatButtonModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/button"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> StarWarsService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../../../core/services/star-wars.service"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Character <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../../../models/character.model"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> GalacticDataSource <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../datasources/galactic-datasource"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Subscription <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"rxjs"</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">"app-character-list"</span><span class="token punctuation">,</span>
  standalone<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
    CommonModule<span class="token punctuation">,</span>
    MatCardModule<span class="token punctuation">,</span>
    MatProgressSpinnerModule<span class="token punctuation">,</span>
    MatButtonModule<span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">"./character-list.component.html"</span><span class="token punctuation">,</span>
  styleUrl<span class="token operator">:</span> <span class="token string">"./character-list.component.scss"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CharacterListComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span><span class="token punctuation">,</span> OnDestroy <span class="token punctuation">{</span>
  characters<span class="token operator">:</span> Character<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  currentPage <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  loading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  totalCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">private</span> starWarsService <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>StarWarsService<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> dataSource<span class="token operator">!</span><span class="token operator">:</span> GalacticDataSource<span class="token punctuation">;</span> <span class="token comment">// Using definite assignment assertion</span>
  <span class="token keyword">private</span> subscription <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subscription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token comment">// Initialize the DataSource</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GalacticDataSource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>starWarsService<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Subscribe to the DataSource observables</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>characters <span class="token operator">=</span> data<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">.</span>loading$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> isLoading<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">.</span>count$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>totalCount <span class="token operator">=</span> count<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Load initial data</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">ngOnDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token comment">// Clean up subscriptions</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">loadCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">.</span><span class="token function">loadCharacters</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentPage<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">loadMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>currentPage<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">hasMoreData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>characters<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>totalCount<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>Notice how the component:</p>
<ol>
<li>Creates an instance of our DataSource</li>
<li>Subscribes to the observables exposed by the DataSource</li>
<li>Calls methods on the DataSource to load data</li>
<li>Properly cleans up subscriptions in <code>ngOnDestroy()</code></li>
</ol>
<h2>Cosmic Compiler Summary</h2>
<ul>
<li>We've <strong>created a GalacticDataSource</strong> that extends Angular CDK's DataSource</li>
<li>We've <strong>implemented connect() and disconnect()</strong> methods as required by the DataSource interface</li>
<li>We've <strong>set up BehaviorSubjects</strong> to manage data, loading state, and total count</li>
<li>We've <strong>created a loadCharacters method</strong> that handles data fetching and state updates</li>
<li>We've <strong>exposed observables</strong> for components to subscribe to</li>
</ul>
<blockquote>
<p>The Ancient Order of Angular maintains that the DataSource pattern is not just about code organization but a philosophical approach to component design. &quot;When a component knows too much about data fetching, it loses focus on its primary purpose: presenting information to users. The DataSource liberates the component from this burden, allowing it to achieve enlightenment,&quot; reads one of their ancient scrolls, found in a dusty GitHub repository.</p>
</blockquote>
<p><em>In our next transmission, we'll transition from our simple card layout to a powerful MatTable implementation and expand our GalacticDataSource to handle pagination properly. This will allow users to navigate through the vast database of Star Wars characters with the elegance of a Jedi Master using the Force while showcasing the true power of the DataSource pattern when paired with Material's table components.</em></p>
<p><em>May your components be lean and your data sources clean.</em></p>
</content>
  </entry>  <entry>
    <title>Galactic Archives - Basic Project Setup</title>
    <link href="https://aaronmaturen.com/musings/post-1-basic-project-setup/"/>
    <updated>2025-06-01T00:00:00Z</updated>
    <id>https://aaronmaturen.com/musings/post-1-basic-project-setup/</id>
    <content type="html"><h1>Angular DataSource with SWAPI: Building the Galactic Archives - Basic Project Setup</h1>
<p><em>In a universe where frameworks multiply faster than tribbles on a grain barge, setting up a new Angular project remains a ritual as ancient as the first <code>npm install</code>. Some say the Ancient Order of Angular created the CLI during a particularly productive full moon, while others insist it emerged fully formed from a quantum fluctuation in the npm registry.</em></p>
<h2>The Foundation of Our Galactic Archives</h2>
<p>Before we can build our magnificent Star Wars data explorer, we need to establish a base of operations. Like any good rebel outpost, our project requires proper infrastructure, defensive shields (error handling), and a sleek command center (UI).</p>
<p>The Cosmic Compiler watches with interest as we lay the groundwork for what will become the most comprehensive archive of galactic data this side of the Outer Rim.</p>
<h2>Creating a New Angular Project</h2>
<p>Let's summon the power of the Angular CLI to create our project:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Invoke the ancient incantation to create a new Angular project with version 18</span>
<span class="token comment"># The Cosmic Compiler appreciates descriptive project names</span>
<span class="token function">npm</span> i <span class="token parameter variable">-g</span> @angular/cli@18.2.19
ng new galactic-archives <span class="token parameter variable">--routing</span> <span class="token parameter variable">--style</span><span class="token operator">=</span>scss --skip-tests<span class="token operator">=</span>false <span class="token parameter variable">--strict</span> <span class="token parameter variable">--standalone</span>

<span class="token comment"># Navigate to the newly created dimensional pocket</span>
<span class="token builtin class-name">cd</span> galactic-archives</code></pre>
<p>When prompted, answer &quot;Yes&quot; to Angular routing (we'll need hyperspace travel between components) and select SCSS as the stylesheet format (the Galactic Standards Committee strongly prefers it over plain CSS).</p>
<h2>Project Structure</h2>
<p>The CLI has conjured a basic project structure for us, but we'll need to adapt it to follow the feature-based architecture prophecied in the TypeScript Prophecies:</p>
<pre><code>galactic-archives/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ app/
â”‚   â”‚   â”œâ”€â”€ app.routes.ts      // Standalone routing configuration
â”‚   â”‚   â”œâ”€â”€ app.config.ts      // Application configuration and providers
â”‚   â”‚   â”œâ”€â”€ app.component.html
â”‚   â”‚   â”œâ”€â”€ app.component.scss
â”‚   â”‚   â””â”€â”€ app.component.ts   // Standalone component
â”‚   â”œâ”€â”€ assets/
â”‚   â”œâ”€â”€ main.ts               // Application bootstrap
â”‚   â””â”€â”€ index.html
â”œâ”€â”€ angular.json
â”œâ”€â”€ package.json
â””â”€â”€ tsconfig.json
</code></pre>
<h2>Installing Angular Material</h2>
<p>No self-respecting galactic archive would be caught without the sleek, professional components of Angular Material. Let's add this to our arsenal:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Summon the Material design entities to our dimension</span>
ng <span class="token function">add</span> @angular/material</code></pre>
<p>When prompted:</p>
<ul>
<li>Choose a theme (I recommend &quot;Custom&quot; for our Star Wars theme later)</li>
<li>Select &quot;Yes&quot; for Angular Material typography</li>
<li>Select &quot;Yes&quot; for browser animations</li>
</ul>
<p>The Material setup wizard is like a helpful protocol droidâ€”slightly annoying but ultimately saving you from hours of manual configuration.</p>
<h2>Adding Tailwind CSS</h2>
<p>While Material provides excellent components, Tailwind CSS gives us the utility-first approach that the Council of Patterns has been advocating for eons. By prefixing Tailwind classes with <code>tw-</code>, we avoid conflicts with Material's styles while maintaining a clear separation of concerns. Material handles the complex components like tables and dialogs, while Tailwind handles spacing, colors, and responsive design without writing custom CSS. This combination lets us rapidly prototype layouts directly in templates while keeping our bundle size smaller by avoiding unnecessary custom styles. The Cosmic Compiler particularly appreciates this organized approach.</p>
<p>Here's a practical example of how Material and Tailwind work together in a component:</p>
<pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- Character card component using both Material and Tailwind --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-card</span>
  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-mb-4 tw-transition-all tw-duration-300 tw-hover:tw-shadow-xl<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-card-header</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-card-title</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-text-xl tw-font-bold tw-text-primary<span class="token punctuation">"</span></span>
      <span class="token punctuation">></span></span>{{ character.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-card-title</span>
    <span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-card-subtitle</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-text-secondary<span class="token punctuation">"</span></span>
      <span class="token punctuation">></span></span>{{ character.species }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-card-subtitle</span>
    <span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-card-header</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-card-content</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-py-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-grid tw-grid-cols-2 tw-gap-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-text-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>Height:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> {{ character.height }}cm
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-text-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>Mass:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> {{ character.mass }}kg
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-card-content</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-card-actions</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-flex tw-justify-end<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">mat-button</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-font-medium<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      VIEW DETAILS
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">mat-icon-button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-ml-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-icon</span><span class="token punctuation">></span></span>favorite_border<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-icon</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-card-actions</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-card</span><span class="token punctuation">></span></span></code></pre>
<p>In this example, we're using Material's <code>mat-card</code> component structure while enhancing it with Tailwind's utility classes for spacing, transitions, hover effects, grid layout, and text styling - all without writing a single line of custom CSS.</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Install Tailwind CSS and its dependencies</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> tailwindcss postcss autoprefixer

<span class="token comment"># Initialize Tailwind CSS configuration</span>
npx tailwindcss init</code></pre>
<p>Now, let's configure Tailwind to work with our Angular project. Create or update the following files:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// tailwind.config.js</span>
<span class="token comment">/** @type {import('tailwindcss').Config} */</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token string">"tw-"</span><span class="token punctuation">,</span> <span class="token comment">// The Galactic Standards Committee requires prefixing to avoid conflicts</span>
  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"./src/**/*.{html,ts}"</span><span class="token punctuation">,</span> <span class="token comment">// Scan all our HTML and TypeScript files</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// We'll add our Star Wars theme colors later</span>
      <span class="token comment">// The Void of Undefined currently occupies this space</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>Next, update your <code>src/styles.scss</code> file:</p>
<pre class="language-scss"><code class="language-scss"><span class="token comment">/* You can add global styles to this file, and also import other style files */</span>
@tailwind base<span class="token punctuation">;</span>
@tailwind components<span class="token punctuation">;</span>
@tailwind utilities<span class="token punctuation">;</span>

<span class="token comment">// The Ancient Order of Angular recommends keeping global styles minimal</span>
<span class="token comment">// Most styling should be component-specific or utility-based</span></code></pre>
<h2>Creating a Basic App Shell</h2>
<p>Now, let's create a simple app shell with a header and footer. This will serve as the command center for our Galactic Archives:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/core"</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">"app-root"</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">"./app.component.html"</span><span class="token punctuation">,</span>
  styleUrls<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./app.component.scss"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  title <span class="token operator">=</span> <span class="token string">"Galactic Archives"</span><span class="token punctuation">;</span> <span class="token comment">// The name of our noble endeavor</span>

  <span class="token comment">// The Cosmic Compiler appreciates well-named methods</span>
  <span class="token function">getCurrentYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Time is an illusion, but copyright dates are not</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>Update the HTML template:</p>
<pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- app.component.html --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-flex tw-flex-col tw-min-h-screen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- Header: Command center of our application --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-bg-gray-900 tw-text-white tw-p-4 tw-shadow-md<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-container tw-mx-auto tw-flex tw-justify-between tw-items-center<span class="token punctuation">"</span></span>
    <span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-text-xl tw-font-bold<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!-- Navigation will be added in a future episode --></span>
        <span class="token comment">&lt;!-- The Inevitable Refactor looms on the horizon --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>

  <span class="token comment">&lt;!-- Main content area: Where the magic happens --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-container tw-mx-auto tw-flex-grow tw-p-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- Router outlet: A portal to other dimensions (components) --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-outlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-outlet</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>

  <span class="token comment">&lt;!-- Footer: Every good application needs a footer --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-bg-gray-900 tw-text-white tw-p-4 tw-mt-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-container tw-mx-auto tw-text-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
        Â© {{ getCurrentYear() }} Galactic Archives | Built with Angular by the
        Rebel Alliance
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h2>Setting Up Standalone Components</h2>
<p>Angular v18 uses the standalone components approach, which is a significant shift from the previous NgModule-based architecture. In the old days (pre-v14), components had to be declared in an NgModule before they could be used, creating a complex web of module dependencies that often led to what the Ancient Order called &quot;ModuleMadnessâ„¢&quot;.</p>
<p>With standalone components, each component declares its own dependencies directly, eliminating the need for NgModules in many cases. This means:</p>
<ol>
<li>No more <code>declarations</code> arrays listing every component</li>
<li>No more importing feature modules just to use a single component</li>
<li>Direct imports of the components you need, when you need them</li>
<li>Simpler lazy-loading without module wrappers</li>
</ol>
<p>Instead of having an <code>AppModule</code> with declarations, imports, and providers, we now have a more streamlined approach with <code>app.config.ts</code> handling application-wide providers and each component managing its own dependencies.</p>
<p>Let's update our <code>app.component.ts</code> to use the standalone approach and create a proper <code>app.config.ts</code>:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/core"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> RouterOutlet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/router"</span><span class="token punctuation">;</span>

<span class="token comment">// Import basic Material modules</span>
<span class="token comment">// The Ancient Order of Angular recommends importing only what you need</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatToolbarModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/toolbar"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatButtonModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/button"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MatIconModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/material/icon"</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  selector<span class="token operator">:</span> <span class="token string">"app-root"</span><span class="token punctuation">,</span>
  standalone<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// The Cosmic Compiler rejoices at standalone components</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>RouterOutlet<span class="token punctuation">,</span> MatToolbarModule<span class="token punctuation">,</span> MatButtonModule<span class="token punctuation">,</span> MatIconModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
  templateUrl<span class="token operator">:</span> <span class="token string">"./app.component.html"</span><span class="token punctuation">,</span>
  styleUrls<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./app.component.scss"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  title <span class="token operator">=</span> <span class="token string">"Galactic Archives"</span><span class="token punctuation">;</span> <span class="token comment">// The name of our noble endeavor</span>

  <span class="token comment">// The Cosmic Compiler appreciates well-named methods</span>
  <span class="token function">getCurrentYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Time is an illusion, but copyright dates are not</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>Now, let's create the application configuration file that sets up providers and bootstraps our app:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// app.config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ApplicationConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/core"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> provideRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/router"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> provideAnimations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/platform-browser/animations"</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> routes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./app.routes"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> appConfig<span class="token operator">:</span> ApplicationConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">provideRouter</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">provideAnimations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// The Ancient Order requires animations for a proper UI experience</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>Finally, let's update the <code>main.ts</code> file to bootstrap our application:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> bootstrapApplication <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@angular/platform-browser"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> appConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./app/app.config"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./app/app.component"</span><span class="token punctuation">;</span>

<span class="token function">bootstrapApplication</span><span class="token punctuation">(</span>AppComponent<span class="token punctuation">,</span> appConfig<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"The Cosmic Compiler encountered an error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2>Running the Application</h2>
<p>With our basic setup complete, let's fire up the hyperdrive and see our creation:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Launch the application into development space</span>
ng serve <span class="token parameter variable">--open</span></code></pre>
<p>If all goes well (and the Dependency Demons haven't been messing with your node_modules), your browser should open to <code>http://localhost:4200</code> displaying our basic Galactic Archives shell.</p>
<h2>Cosmic Compiler Summary</h2>
<ul>
<li>We've <strong>created a new Angular project</strong> using the CLI, the preferred tool of the Ancient Order of Angular</li>
<li>We've <strong>installed Angular Material</strong> for sleek, professional UI components</li>
<li>We've <strong>added Tailwind CSS</strong> for utility-first styling with the <code>tw-</code> prefix to avoid conflicts</li>
<li>We've <strong>created a basic app shell</strong> with header and footer using our new tools</li>
<li>We've <strong>set up the foundation</strong> for our feature-based architecture</li>
</ul>
<p><em>In our next transmission, we'll establish proper code quality standards with ESLint and Prettier. The Galactic Standards Committee has been known to dispatch inspectors without warning, so we'd best be prepared. As the Recursive Philosopher says, &quot;Good code is its own documentation, but good documentation is... good code?&quot;</em></p>
<p><em>May your builds be swift and your runtime errors few.</em></p>
</content>
  </entry>  <entry>
    <title>Galactic Archives - Introduction</title>
    <link href="https://aaronmaturen.com/musings/post-0-introduction/"/>
    <updated>2025-06-01T00:00:00Z</updated>
    <id>https://aaronmaturen.com/musings/post-0-introduction/</id>
    <content type="html"><h1>Angular DataSource with SWAPI: Building the Galactic Archives - Introduction</h1>
<p><em>In a distant corner of the development universe, where semicolons roam free and variables exist in quantum superposition until observed by a debugger, lies the challenge of efficiently displaying paginated data from remote APIs. It's a challenge as old as the web itselfâ€”or at least as old as that legacy codebase no one wants to touch.</em></p>
<blockquote>
<p>The Cosmic Compiler once told me, &quot;Any developer can write code that a computer understands, but only the worthy can write code that humans understand.&quot; Then it rejected my pull request for using nested ternary operators. The Compiler sees all, knows all, and has strong opinions about your variable naming conventions. It's said that when a truly elegant implementation is committed, the Compiler briefly stops judging you and instead whispers, &quot;Acceptable.&quot; Developers spend entire careers chasing that validation.</p>
</blockquote>
<h2>The Problem with Paginated Data</h2>
<p>If you've ever tried to display a large dataset in Angular, you've likely encountered the cosmic horror that is pagination implementation. Tables that stretch into infinity, spinners that mock your existence, and state management that makes you question your career choices.</p>
<p>Legend speaks of the Ancient Order of Angular, a secretive council of developers who meet in a dimly lit conference room with suspiciously good snacks. During what was supposed to be a standard sprint review in 2016, one memberâ€”high on espresso and low on sleepâ€”had a vision while staring at yet another pagination bug. &quot;What if,&quot; they whispered, knocking over three energy drinks, &quot;we abstracted all this mess away?&quot; The other members, equally caffeinated, erupted in applause. Thus, the <strong>DataSource</strong> pattern was bornâ€”not from careful planning but from the collective desperation of developers who couldn't bear to write another <code>currentPage</code> variable.</p>
<h2>What is the Angular DataSource Pattern?</h2>
<p>The DataSource pattern is like a cosmic bridge between your chaotic API responses and your serene, well-behaved UI components. It's a specialized data provider that handles:</p>
<ul>
<li>Data fetching and transformation</li>
<li>Pagination logic</li>
<li>Sorting capabilities</li>
<li>Filtering operations</li>
<li>Loading states</li>
</ul>
<p>As the Recursive Philosopher once said, &quot;To understand DataSource, one must first understand that data has a source.&quot; Profound, if somewhat circular.</p>
<h2>Why Use DataSource for API Data?</h2>
<p>The Galactic Standards Committee (Section 42, Paragraph Î©) strongly recommends using DataSource for any application dealing with remote data because:</p>
<ol>
<li><strong>It separates data concerns from presentation logic</strong>â€”keeping your components blissfully unaware of the eldritch horrors of API calls</li>
<li><strong>It handles pagination elegantly</strong>â€”no more &quot;load more&quot; buttons held together with hope and duct tape</li>
<li><strong>It integrates seamlessly with Material components</strong>â€”like MatTable, MatSort, and MatPaginator</li>
<li><strong>It provides a consistent interface</strong>â€”making your code more maintainable than that one project we don't talk about</li>
</ol>
<h2>The Core of DataSource</h2>
<p>At its heart, a DataSource implementation looks something like this:</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// Behold! The skeleton of our GalacticDataSource, currently dormant but soon to be awakened</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">GalacticDataSource</span> <span class="token keyword">extends</span> <span class="token class-name">DataSource<span class="token operator">&lt;</span>Character<span class="token operator">></span></span> <span class="token punctuation">{</span>
  <span class="token comment">// The Void of Undefined awaits any who access this data before it's loaded</span>
  <span class="token keyword">private</span> dataSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject<span class="token operator">&lt;</span>Character<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> loadingSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Expose the loading state to components that wish to display spinners,</span>
  <span class="token comment">// progress bars, or existential loading messages</span>
  <span class="token keyword">public</span> loading$ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">asObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> starWarsService<span class="token operator">:</span> StarWarsService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// The Cosmic Compiler particularly enjoys when you implement abstract methods</span>
  <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>Character<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataSubject<span class="token punctuation">.</span><span class="token function">asObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Prevent memory leaks, lest the Dependency Demons claim your application</span>
  <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dataSubject<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Load characters with optional pagination, sorting, and filtering</span>
  <span class="token function">loadCharacters</span><span class="token punctuation">(</span>pageIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> pageSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> filter <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>starWarsService
      <span class="token punctuation">.</span><span class="token function">getCharacters</span><span class="token punctuation">(</span>pageIndex<span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span> filter<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
        <span class="token comment">// The Inevitable Refactor suggests we handle errors gracefully</span>
        <span class="token function">catchError</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">of</span><span class="token punctuation">(</span><span class="token punctuation">{</span> results<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadingSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2>Why SWAPI?</h2>
<p>For our galactic journey, we've chosen the Star Wars API (SWAPI) as our data source. Why? Because:</p>
<ol>
<li>It's free and requires no authenticationâ€”perfect for when your API key budget matches your patience for CORS errors</li>
<li>It has built-in paginationâ€”just like the saga itself, it comes in episodes</li>
<li>It provides rich, nested dataâ€”ideal for demonstrating complex data handling</li>
<li>It's Star Warsâ€”and if you can't make learning fun with lightsabers and droids, you're probably a Sith Lord</li>
</ol>
<h2>What We'll Build: The Galactic Archives</h2>
<p>Throughout this series, we'll construct the <strong>Galactic Archives</strong>â€”a comprehensive database interface for exploring Star Wars data. Our application will feature:</p>
<ul>
<li>A responsive, Material Design interface</li>
<li>Advanced filtering and sorting capabilities</li>
<li>Efficient pagination</li>
<li>Accessibility features</li>
<li>Performance optimizations</li>
<li>A feature-based architecture that would make the Council of Patterns proud</li>
</ul>
<h2>Prerequisites for Following Along</h2>
<p>Before embarking on this journey through hyperspace, ensure you have:</p>
<ul>
<li>Node.js (v20+) and npm installedâ€”the hyperdrive of our development environment</li>
<li>Angular CLI (v18+)â€”your trusty Code Saber</li>
<li>Basic knowledge of Angular and TypeScriptâ€”we assume you've at least heard of components</li>
<li>A sense of humorâ€”to endure the inevitable SchrÃ¶dinger's Bugs</li>
<li>A browserâ€”preferably one that doesn't make CSS a suggestion rather than a rule</li>
</ul>
<h2>Cosmic Compiler Summary</h2>
<ul>
<li>The <strong>DataSource</strong> pattern provides a clean interface between data sources and UI components</li>
<li>It handles pagination, sorting, and filtering with the elegance of a Jedi Master</li>
<li>SWAPI gives us rich, paginated data perfect for our demonstration</li>
<li>We'll build the Galactic Archivesâ€”a feature-complete Star Wars data explorer</li>
<li>Our architecture will follow best practices that would impress even the Ancient Order of Angular</li>
</ul>
<p><em>In our next installment, we'll set up our project and create the basic application shell. The Cosmic Compiler whispers that it involves more configuration than coding, but such is the way of the Force. May your terminals be error-free and your builds lightning-fast.</em></p>
</content>
  </entry>  <entry>
    <title>Galactic Archives Series</title>
    <link href="https://aaronmaturen.com/musings/galactic-archives-series/"/>
    <updated>2025-06-01T00:00:00Z</updated>
    <id>https://aaronmaturen.com/musings/galactic-archives-series/</id>
    <content type="html"><h1>Galactic Archives Series</h1>
<p><em>A comprehensive guide to building efficient data sources in Angular using the Star Wars API.</em></p>
<p>This series explores advanced patterns for handling paginated data in Angular applications. Using the Star Wars API (SWAPI) as our data source, we'll build a robust, reusable solution for displaying and navigating large datasets.</p>
<p><strong>Live Demo:</strong> <a href="https://aaronmaturen.com/galactic-archives/">https://aaronmaturen.com/galactic-archives/</a></p>
<p><strong>Source Code:</strong> <a href="https://github.com/aaronmaturen/galactic-archives">github.com/aaronmaturen/galactic-archives</a></p>
<h2>What You'll Learn</h2>
<ul>
<li>Creating custom data sources in Angular</li>
<li>Handling paginated APIs efficiently</li>
<li>Implementing virtual scrolling</li>
<li>Managing complex state with RxJS</li>
<li>Building reusable, testable components</li>
</ul>
<h2>Table of Contents</h2>
<h3>Foundation Phase</h3>
<ol start="0">
<li><a href="https://aaronmaturen.com/musings/post-0-introduction/">Introduction</a> - Introduces the DataSource pattern concept and outlines the plan to build a Star Wars data explorer application called &quot;Galactic Archives&quot;</li>
<li><a href="https://aaronmaturen.com/musings/post-1-basic-project-setup/">Basic Project Setup</a> - Creates the Angular project with standalone components, sets up Angular Material and Tailwind CSS with <code>tw-</code> prefix</li>
<li><a href="https://aaronmaturen.com/musings/post-2-code-quality-setup/">Code Quality Setup</a> - Implements ESLint, Prettier, and Husky pre-commit hooks to ensure consistent code style</li>
<li><a href="https://aaronmaturen.com/musings/post-3-testing-setup/">Testing Setup</a> - Configures Jest for unit testing and Playwright for E2E testing with CI integration</li>
</ol>
<h3>Architecture Phase</h3>
<ol start="4">
<li><a href="https://aaronmaturen.com/musings/post-4-feature-based-architecture/">Feature-Based Architecture</a> - Organizes the application using feature modules, smart/dumb component patterns, and lazy loading</li>
<li><a href="https://aaronmaturen.com/musings/post-5-star-wars-api-service/">Star Wars API Service</a> - Builds a robust HTTP client service with TypeScript interfaces for SWAPI endpoints</li>
<li><a href="https://aaronmaturen.com/musings/post-6-api-mocking-msw/">API Mocking with MSW</a> - Sets up Mock Service Worker to intercept and mock SWAPI requests for reliable testing</li>
</ol>
<h3>Core DataSource Implementation Phase</h3>
<ol start="7">
<li><a href="https://aaronmaturen.com/musings/post-7-datasource-foundation/">DataSource Foundation</a> - Creates a custom Angular DataSource implementation with reactive state management</li>
<li><a href="https://aaronmaturen.com/musings/post-8-implementing-pagination/">Implementing Pagination</a> - Adds client and server-side pagination with infinite scrolling for large datasets</li>
<li><a href="https://aaronmaturen.com/musings/post-9-adding-sorting/">Adding Sorting</a> - Implements multi-column sorting with custom comparators for complex data types</li>
<li><a href="https://aaronmaturen.com/musings/post-10-implementing-filtering/">Implementing Filtering</a> - Builds advanced search filters with dynamic query parameters for Star Wars data</li>
</ol>
<h3>UI Enhancement &amp; Deployment Phase</h3>
<ol start="11">
<li><a href="https://aaronmaturen.com/musings/post-11-star-wars-theming/">Star Wars Theming</a> - Implements custom Star Wars UI elements, dark mode, and performance optimizations</li>
<li><a href="https://aaronmaturen.com/musings/post-12-cicd-github-actions/">CI/CD with GitHub Actions</a> - Sets up automated builds, testing, and deployment to GitHub Pages</li>
</ol>
<h2>Prerequisites</h2>
<ul>
<li>Basic knowledge of Angular and TypeScript</li>
<li>Familiarity with RxJS observables</li>
<li>Understanding of HTTP client operations</li>
</ul>
<h2>Project Evolution Overview</h2>
<p>This document provides an analysis of the blog post series, demonstrating how each post builds incrementally on the previous one to create a complete Angular application implementing the DataSource pattern with the Star Wars API.</p>
<p>Join me on this journey through the galaxy of Angular data management, where we'll tackle common challenges and build solutions that you can apply to your own projects.</p>
</content>
  </entry></feed>
